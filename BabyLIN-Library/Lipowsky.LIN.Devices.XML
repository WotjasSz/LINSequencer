<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Lipowsky.LIN.Devices</name>
    </assembly>
    <members>
        <member name="T:de.lipowsky.BLC.BabyLin">
            <summary>
            The BabyLIN DLL provides functions to control Baby-LIN devices.
            </summary>
            <summary>
            The BabyLIN DLL provides functions to control Baby-LIN devices.
            </summary>
            <summary>
            The BabyLIN DLL provides functions to control Baby-LIN devices.
            </summary>
            <summary>
            The BabyLIN DLL provides functions to control Baby-LIN devices.
            </summary>
            <summary>
            The BabyLIN DLL provides functions to control Baby-LIN devices.
            </summary>
            <summary>
            The BabyLIN DLL provides functions to control Baby-LIN devices.
            </summary>
            <summary>
            The BabyLIN DLL provides functions to control Baby-LIN devices.
            </summary>
            <summary>
            The BabyLIN DLL provides functions to control Baby-LIN devices.
            </summary>
            <summary>
            The BabyLIN DLL provides functions to control Baby-LIN devices.
            </summary>
            <summary>
            The BabyLIN DLL provides functions to control Baby-LIN devices.
            </summary>
            <summary>
            The BabyLIN DLL provides functions to control Baby-LIN devices.
            </summary>
            <summary>
            The BabyLIN DLL provides functions to control Baby-LIN devices.
            </summary>
            <summary>
            The BabyLIN DLL provides functions to control Baby-LIN devices.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_OK">
            \addtogroup return_values Return Values
              \brief List of possible return values of BabyLINDLL functions
            
              The following values may be returned by BLC_ and BLC_ functions to indicate the success or failure of an operation.
              Mostly, the functions will return BLC_OK as an indicator for success. However, some functions use positive values to return the result of the function on success
             ( for example BLC_getFrameCount will return the number of frames )
            <summary>
            Function successfully completed.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_PC_SIDE_ERRORS">
            <summary>
            Limit for separating BabyLIN- and PC-side errors; below there are all PC-side ones.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_RESOURCE_ERROR">
            <summary>
            Internal resource allocation problem. Maybe out of memory/handles/etc.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_HANDLE_INVALID">
            <summary>
            Specified handle invalid.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_NO_CONNECTION">
            <summary>
            There is no connection open.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_SERIAL_PORT_ERROR">
            <summary>
            Serial port couldn't be opened or closed.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_CMD_SYNTAX_ERROR">
            <summary>
            BabyLIN command syntax error.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_NO_ANSWER">
            <summary>
            BabyLIN doesn't answer within timeout.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_FILE_ERROR">
            <summary>
            Unable to open a file.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_WRONG_PARAMETER">
            <summary>
            Wrong parameter given to function.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_NO_DATA">
            <summary>
            No data available upon request.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_NO_SDF">
            <summary>
            No SDF was loaded previously.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_DP_MSG_ERROR">
            <summary>
            Internal message format error.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_SIGNAL_NOT_EXISTENT">
            <summary>
            The given signal_nr or name does not exist in loaded SDF.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_SIGNAL_IS_SCALAR">
            <summary>
            The signal chosen is a scalar, but an array function was called.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_SIGNAL_IS_ARRAY">
            <summary>
            The signal chosen is an array, but an scalar function was called.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_SDF_INSUFFICIENT_FIRMWARE">
            <summary>
            The SDF is unsupported by connected Baby-LIN.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_ENCODING_NOT_EXISTENT">
            <summary>
            The given signal has no encoding.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_BUFFER_TOO_SMALL">
            <summary>
            The given buffer is too small.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_NO_ANSWER_DATA">
            <summary>
            There is no additional answer data present from last sendCommand-call.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_ANSWER_DATA_NOT_EXISTENT">
            <summary>
            Additional data with given index/name not present
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_NO_CHANNELS_AVAILABLE">
            <summary>
            The device does not support channels
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_UNKNOWN_COMMAND">
            <summary>
            Unknown command passed to sendCommand
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_TIMEOUT">
            <summary>
            A sendCommand message timed out
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_SDF_INCOMPATIBLE">
            <summary>
            SDF can not be loaded to a the device due to incompatibibility ( incompatible SDFV3 to SDFV2 device )
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_DOWNLOAD_IN_PROGRESS">
            <summary>
            A download is already in progress
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_UA_INVALID_PARAMETER">
            <summary>
            the one of the parameters is invalid. like a null pointer in a @ref BLC_getUnsignedNumber.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_UA_NO_GETTER_DEFINED">
            <summary>
            the property has no getter for that type e.g. a unsigned number can not be read from a Binary property.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_UA_NO_SETTER_DEFINED">
            <summary>
            the property has no setter for that type e.g. a callback can not be stored into Binary property.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_UA_SET_VALUE_REJECTED">
            <summary>
            the value given was not set. the reason should be documented in the help file.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_UA_NOT_RESOLVABLE_TAG_FIRST">
            <summary>
            A return value between BLC_UA_NOT_RESOLVABLE_TAG_FIRST and BLC_UA_NOT_RESOLVABLE_TAG_MAX indicates that the
            path parameter given to one of the BLC_UnifiedAccess functions could not be found. The index of that key is the return
            value - BLC_UA_NOR_RESOLVABLE_TAG_FIRST .
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_UA_NOT_RESOLVABLE_TAG_MAX">
            <summary>
            The given Path should not have more then 100 tags
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_UA_NO_REQUEST_DATA">
            <summary>
            The ua_service_iso_tp, is supposed to send a request but has no request data.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_UA_SERVICE_FRAME_ORDER">
            <summary>
            During the reception of the Response or the Request an invalid series of consecutive frames were detected.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_UA_SERVICE_TIMEOUT_SEND">
            <summary>
            A Frame send by the DLL was not echoed by the BabyLIN within timeout_frame milliseconds. You might have to do a
            disframe/mon_on with that FrameID.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_UA_SERVICE_TIMEOUT_RESPONSE">
            <summary>
            The Response was not received within timeout_response milliseconds. Maybe the Request is malformed?
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_UA_SERVICE_TIMEOUT_FLOWCONTROL_SEND">
            <summary>
            A flow-control Frame send by the DLL was not echoed by the BabyLIN within timeout_frame milliseconds. You might have
            to do a disframe/mon_on with that FrameID.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_UA_SERVICE_FLOWCONTROL_INVALIDSTATE">
            <summary>
            The flow-control state reported by the target is not one of the known states.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_UA_SERVICE_FLOWCONTROL_WAITSTATES">
            <summary>
            The flow-control state was "wait"(0x1) in more then max_flow_wait flow-control frames.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_UA_SERVICE_FLOWCONTROL_OVERFLOW">
            <summary>
            The flow-control state was "overflow"(0x2).
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_UA_REQUESTED_OBJECT_NOT_FOUND_FIRST">
            <summary>
            A return value between BLC_UA_REQUESTED_OBJECT_NOT_FOUND_FIRST and BLC_UA_REQUESTED_OBJECT_NOT_FOUND_MAX
            indicates that the path parameter given to one of the BLC_UnifiedAccess functions could not be resolved. The index of
            the object, that could not be found is the return value - BLC_UA_REQUESTED_OBJECT_NOT_FOUND_FIRST (this index is
            0 based).
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_UA_REQUESTED_OBJECT_NOT_FOUND_MAX">
            <summary>
            The given Path should not have more then 100 objects
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.SDF_OK">
            <summary>
            Function successfully completed.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.SDF_HANDLE_INVALID">
            <summary>
            The value passed as a SDF handle is not valid.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.SDF_IN_USE">
            <summary>
            The sdf can not be unloaded as the SDF is in use on a device.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_DOT_NET_WRAPPER_ERROR">
            <summary>
            An error specific to the .net Wrapper DLL
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BL_ERR_SDF_HEADER">
            <summary>
            Missing or unknown SDF header. This Error occurs when a File is read that is not a SDF File.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BL_ERR_DP_CORRUPT">
            <summary>
            A corrupted DPMSG was received. This happens when a DPMessage contains an invalid identifier.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BL_ERR_DP_SEQUENCE">
            <summary>
            An unexpected DPMSG was received.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BL_ERR_DP_MAPPING">
            <summary>
            The SDF Section Type does not match the Channel Type it is loaded on to.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BL_ERR_CHANNEL">
            <summary>
            The requested Action can not be carried out on the selected channel.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BL_ERR_SECTION_TYPE">
            <summary>
            The Section Type does not Match the Channel Type.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BL_ERR_NULLPOINTER">
            <summary>
            The Object you are trying to manipulate was never created.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BL_ERR_SECTION_MAPPING">
            <summary>
            The Section Type does not Match the Channel Type.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BL_ERR_DATAFLASH_INIT">
            <summary>
            Dataflash/persistent memory could not be initialized.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BL_ERR_DATAFLASH_INDEX">
            <summary>
            Dataflash/persistent memory does not keep requested SDF index.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BL_ERR_DATAFLASH_NOSPACE">
            <summary>
            Dataflash/persistent memory is to small to hold the SDF.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BL_ERR_DATAFLASH">
            <summary>
            Dataflash/persistent memory read or write error.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BL_ERR_LICENCE">
            <summary>
            Licence for the requested feature is not installed.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BL_ERR_HEAP_EXHAUSTED">
            <summary>
            Not sufficient Heap Space to perform the requested action.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BL_ERR_SIG_REFERENCE">
            <summary>
            Same as ERR_NULLPOINTER but Objects are restricted to Signals.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BL_ERR_FRAME_REFERENCE">
            <summary>
            Same as ERR_NULLPOINTER but Objects are restricted to Frames.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BL_ERR_CFG_REFERENCE">
            <summary>
            Same as ERR_NULLPOINTER but Objects are restricted to Configurations.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BL_ERR_MACROSEL_REFERENCE">
            <summary>
            Same as ERR_NULLPOINTER but Objects are restricted to MacroSelections.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BL_ERR_EVENT_REFERENCE">
            <summary>
            Same as ERR_NULLPOINTER but Objects are restricted to Events.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BL_ERR_SIGFUNC_REFERENCE">
            <summary>
            Same as ERR_NULLPOINTER but Objects are restricted to SignalFunctions.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BL_ERR_CRC">
            <summary>
            The Loaded SDF is discarded because the checksum is wrong.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BL_ERR_NOT_INITIALIZED">
            <summary>
            Same as ERR_SEQUENCE The requested Component is not yet initialized.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BL_ERR_FRAMEID_LOOKUP_FAILED">
            <summary>
            Same as ERR_FRAME_REFERENCE.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BL_ERR_MACRO_REFERENCE">
            <summary>
            Same as ERR_NULLPOINTER but Objects are restricted to Macros.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BL_ERR_PARAMVALUE">
            <summary>
            A parameter had an invalid value.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BL_ERR_CONDITION">
            <summary>
            Condition not be applied or is not full filled.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BL_ERR_PARAMCOUNT">
            <summary>
            Invalid number of Parameters.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BL_ERR_SERVICEQUEUE_EXHAUSTED">
            <summary>
            No more Services can be enqueued because the Service queue is full.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BL_ERR_DP_PARSE">
            <summary>
            Error Parsing a parameter of a DPMSG. The parameter index will be added onto resulting in the final Error code.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BL_ERR_DP_PARSE_TOP">
            <summary>
            Upper limit of the reserved ERR_DP_PARSE indices.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BL_ERR_DP_ARRAY_SIZE">
            <summary>
            Same as ERR_PARAMVALUE+x but only for Array Size.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BL_ERR_DP_NONAME">
            <summary>
            The DPMSG does not start with a message name.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BL_ERR_DP_NAME_TO_SHORT">
            <summary>
            The DPMSG name is empty.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BL_ERR_DP_NAME_TO_LONG">
            <summary>
            Same as ERR_DP_CORRUPT. Happens when the message name field is longer then the entire message.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BL_CMD_NOT_SUPPORTED">
            <summary>
            Macro Command/Event Action is not known.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BL_ERR_UNDEF">
            <summary>
            A not further specified Error.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BL_ERR_UNKNOWN_CMD">
            <summary>
            An unknown Command was received.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BL_OPERATION_PENDING">
            <summary>
            A not further specified Error.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BL_MACRO_STILL_RUNNING">
            <summary>
            The Macro result can not be read, because the macro is still running.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BL_MACRO_SAME_RUNNING">
            <summary>
            The Macro can not be started, because the macro is still running.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BL_MACRO_OTHER_RUNNING">
            <summary>
            No more parallel Macros are allowed.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BL_MACRO_START_FAIL">
            <summary>
            The Macro could not be started.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BL_MACRO_NEVER_EXECUTED">
            <summary>
            The initial Macro error value.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BL_MACRO_ERRCODE_IN_RESULT">
            <summary>
            Macro Result actually contains the error value.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BL_MACRO_EXCEPTIONCODE_IN_RESULT">
            <summary>
            Macro Result actually contains the exception value.
            </summary>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_registerFrameCallback(System.IntPtr,de.lipowsky.BLC.BabyLin.CallBackFrameDelegate)">
            <summary>
            Registers a callback function, which is called on every reception of a (monitored) frame.
            
            Issuing a NULL-pointer de-registers the callback function. As the function is called
            from another thread context, take care of thread-safety (i.e. using mutexes, etc.).
            </summary>
            <param name="handle">Handle representing the channel id which the frame occurred</param>
            <param name="pCallback">Pointer to a function call-compatible to  CallBackFrameDelegate.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_registerUserDataFrameCallback(System.IntPtr,de.lipowsky.BLC.BabyLin.CallBackUserDataFrameDelegate,System.IntPtr)">
            <summary>
            Registers a callback function, which is called on every reception of a (monitored) frame.
            
            Issuing a NULL-pointer de-registers the callback function. As the function is called
            from another thread context, take care of thread-safety (i.e. using mutexes, etc.).
            
            Use BabyLin.ConvertObjectToIntPtr() and BabyLin.ConvertIntPtrToObject() to en- and decode objects into IntPtr.
            </summary>
            <param name="handle">Handle representing the channel id which the frame occurred</param>
            <param name="pCallback">Pointer to a function call-compatible to  CallBackUserDataFrameDelegate.</param>
            <param name="userdata">Custom user data</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_registerJumboFrameCallback(System.IntPtr,de.lipowsky.BLC.BabyLin.CallBackJumboFrameDelegate)">
            <summary>
            Registers a callback function, which is called on every reception of a (monitored) jumbo frame.
            
            Issuing a NULL-pointer de-registers the callback function. As the function is called
            from another thread context, take care of thread-safety (i.e. using mutexes, etc.).
            </summary>
            <param name="handle">Handle representing the channel id which the frame occurred</param>
            <param name="pCallback">Pointer to a function call-compatible to  CallBackJumboFrameDelegate.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_registerUserDataJumboFrameCallback(System.IntPtr,de.lipowsky.BLC.BabyLin.CallBackUserDataJumboFrameDelegate,System.IntPtr)">
            <summary>
            Registers a callback function, which is called on every reception of a (monitored) jumbo frame.
            
            Issuing a NULL-pointer de-registers the callback function. As the function is called
            from another thread context, take care of thread-safety (i.e. using mutexes, etc.).
            
            Use BabyLin.ConvertObjectToIntPtr() and BabyLin.ConvertIntPtrToObject() to en- and decode objects into IntPtr.
            </summary>
            <param name="handle">Handle representing the channel id which the frame occurred</param>
            <param name="pCallback">Pointer to a function call-compatible to  CallBackUserDataJumboFrameDelegate.</param>
            <param name="userdata">Custom user data</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_registerSignalCallback(System.IntPtr,de.lipowsky.BLC.BabyLin.CallBackSignalDelegate)">
            <summary>
            Registers a callback function, which is called on every reception of a (monitored) signal.
            
            Issuing a NULL-pointer de-registers the callback function. As the function is called
            from another thread context, take care of thread-safety (i.e. using mutexes, etc.).
            </summary>
            <param name="handle">Handle representing the channel on which the signal occurred;</param>
            <param name="pCallback">Pointer to a function call-compatible to CallBackSignalDelegate.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_registerUserDataSignalCallback(System.IntPtr,de.lipowsky.BLC.BabyLin.CallBackUserDataSignalDelegate,System.IntPtr)">
            <summary>
            Registers a callback function, which is called on every reception of a (monitored) signal.
            
            Issuing a NULL-pointer de-registers the callback function. As the function is called
            from another thread context, take care of thread-safety (i.e. using mutexes, etc.).
            
            Use BabyLin.ConvertObjectToIntPtr() and BabyLin.ConvertIntPtrToObject() to en- and decode objects into IntPtr.
            </summary>
            <param name="handle">Handle representing the channel on which the signal occurred;</param>
            <param name="pCallback">Pointer to a function call-compatible to CallBackUserDataSignalDelegate.</param>
            <param name="userdata">Custom user data</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_registerErrorCallback(System.IntPtr,de.lipowsky.BLC.BabyLin.CallBackErrorDelegate)">
            <summary>
            Registers a callback function, which is called on every reception of an error message.
            
            Issuing a NULL-pointer de-registers the callback function. As the function is called
            from another thread context, take care of thread-safety (i.e. using mutexes, etc.).
            </summary>
            <param name="handle">Handle representing the channel emitting the error; returned previously by</param>
            <param name="pCallback">Pointer to a function call-compatible to CallBackErrorDelegate.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_registerUserDataErrorCallback(System.IntPtr,de.lipowsky.BLC.BabyLin.CallBackUserDataErrorDelegate,System.IntPtr)">
            <summary>
            Registers a callback function, which is called on every reception of an error message.
            
            Issuing a NULL-pointer de-registers the callback function. As the function is called
            from another thread context, take care of thread-safety (i.e. using mutexes, etc.).
            
            Use BabyLin.ConvertObjectToIntPtr() and BabyLin.ConvertIntPtrToObject() to en- and decode objects into IntPtr.
            </summary>
            <param name="handle">Handle representing the channel emitting the error; returned previously by</param>
            <param name="pCallback">Pointer to a function call-compatible to CallBackUserDataErrorDelegate.</param>
            <param name="userdata">Custom user data</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_registerDebugCallback(System.IntPtr,de.lipowsky.BLC.BabyLin.CallBackDebugDelegate)">
            <summary>
            Registers a callback function, which is called whenever a debug message from a BabyLIN-Device is received.
            
            Issuing a NULL-pointer de-registers the callback function. As the function is called
            from another thread context, take care of thread-safety (i.e. using mutexes, etc.).
            </summary>
            <param name="handle">Handle representing the channel emitting the error; returned previously by</param>
            <param name="pCallback">Pointer to a function call-compatible to CallBackDebugDelegate.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_registerUserDataDebugCallback(System.IntPtr,de.lipowsky.BLC.BabyLin.CallBackUserDataDebugDelegate,System.IntPtr)">
            <summary>
            Registers a callback function, which is called whenever a debug message from a BabyLIN-Device is received.
            
            Issuing a NULL-pointer de-registers the callback function. As the function is called
            from another thread context, take care of thread-safety (i.e. using mutexes, etc.).
            
            Use BabyLin.ConvertObjectToIntPtr() and BabyLin.ConvertIntPtrToObject() to en- and decode objects into IntPtr.
            </summary>
            <param name="handle">Handle representing the channel emitting the error; returned previously by</param>
            <param name="pCallback">Pointer to a function call-compatible to CallBackUserDataDebugDelegate.</param>
            <param name="userdata">Custom user data</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_registerMacroStateCallback(System.IntPtr,de.lipowsky.BLC.BabyLin.CallBackMacroStateDelegate)">
            <summary>
            Registers a callback function, which is called whenever the execution state of a macro changes.
            
            Issuing a NULL-pointer de-registers the callback function. As the function is called
            from another thread context, take care of thread-safety (i.e. using mutexes, etc.).
            </summary>
            <param name="handle">Handle representing the channel emitting the error; returned previously by</param>
            <param name="pCallback">Pointer to a function call-compatible to CallBackMacroStateDelegate.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_registerUserDataMacroStateCallback(System.IntPtr,de.lipowsky.BLC.BabyLin.CallBackUserDataMacroStateDelegate,System.IntPtr)">
            <summary>
            Registers a callback function, which is called whenever the execution state of a macro changes.
            
            Issuing a NULL-pointer de-registers the callback function. As the function is called
            from another thread context, take care of thread-safety (i.e. using mutexes, etc.).
            
            Use BabyLin.ConvertObjectToIntPtr() and BabyLin.ConvertIntPtrToObject() to en- and decode objects into IntPtr.
            </summary>
            <param name="handle">Handle representing the channel emitting the error; returned previously by</param>
            <param name="pCallback">Pointer to a function call-compatible to CallBackUserDataMacroStateDelegate.</param>
            <param name="userdata">Custom user data</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_registerDTLRequestCallback(System.IntPtr,de.lipowsky.BLC.BabyLin.CallBackDTLDelegate)">
            <summary>
            Registers a callback function, which is called whenever dtl response is received.
            
            Issuing a NULL-pointer de-registers the callback function. As the function is called
            from another thread context, take care of thread-safety (i.e. using mutexes, etc.).
            </summary>
            <param name="handle">Handle representing the channel emitting the error; returned previously by</param>
            <param name="pCallback">Pointer to a function call-compatible to CallBackDTLDelegate.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_registerUserDataDTLRequestCallback(System.IntPtr,de.lipowsky.BLC.BabyLin.CallBackUserDataDTLDelegate,System.IntPtr)">
            <summary>
            Registers a callback function, which is called whenever dtl response is received.
            
            Issuing a NULL-pointer de-registers the callback function. As the function is called
            from another thread context, take care of thread-safety (i.e. using mutexes, etc.).
            
            Use BabyLin.ConvertObjectToIntPtr() and BabyLin.ConvertIntPtrToObject() to en- and decode objects into IntPtr.
            </summary>
            <param name="handle">Handle representing the channel emitting the error; returned previously by</param>
            <param name="pCallback">Pointer to a function call-compatible to CallBackUserDataDTLDelegate.</param>
            <param name="userdata">Custom user data</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_registerDTLResponseCallback(System.IntPtr,de.lipowsky.BLC.BabyLin.CallBackDTLDelegate)">
            <summary>
            Registers a callback function, which is called on every reception of a DTL response, but only if BabyLIN emulates the master node.
            Issuing a NULL-pointer de-registers the callback function. As the function is called
            from another thread context, take care of thread-safety (i.e. using mutexes, etc.).
            </summary>
            <param name="handle">Handle representing the connection; returned previously by BL_open().</param>
            <param name="pCallback">Reference to a function call-compatible to CallBackDTLDelegate.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000)  BL_getLastError().
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_registerUserDataDTLResponseCallback(System.IntPtr,de.lipowsky.BLC.BabyLin.CallBackUserDataDTLDelegate,System.IntPtr)">
            <summary>
            Registers a callback function, which is called on every reception of a DTL response, but only if BabyLIN emulates the master node.
            Issuing a NULL-pointer de-registers the callback function. As the function is called
            from another thread context, take care of thread-safety (i.e. using mutexes, etc.).
            
            Use BabyLin.ConvertObjectToIntPtr() and BabyLin.ConvertIntPtrToObject() to en- and decode objects into IntPtr.
            </summary>
            <param name="handle">Handle representing the connection; returned previously by BL_open().</param>
            <param name="pCallback">Reference to a function call-compatible to CallBackUserDataDTLDelegate.</param>
            <param name="userdata">Custom user data</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000)  BL_getLastError().
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_registerUserDataEventCallback(System.IntPtr,de.lipowsky.BLC.BabyLin.CallBackUserDataEventDelegate,System.IntPtr)">
            <summary>
            Not documented yet
            Use BabyLin.ConvertObjectToIntPtr() and BabyLin.ConvertIntPtrToObject() to en- and decode objects into IntPtr.
            </summary>
            <param name="handle">Handle representing the connection; returned previously by BL_open().</param>
            <param name="pCallback">Reference to a function call-compatible to CallBackUserDataEventDelegate.</param>
            <param name="userdata">Custom user data</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000)  BL_getLastError().
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getVersion(System.Int32@,System.Int32@)">
            <summary>
            Get the major and minor version number of the library.
            
            This function retreives the version in the given parameter variables of the
            library.
            </summary>
            <param name="major">major part of version number.</param>
            <param name="minor">minor part of version number.</param>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getExtendedVersion(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Get the major, minor and patch version number of the library.
            
            This function retreives the version in the given parameter variables of the
            library.
            </summary>
            <param name="major">major part of version number.</param>
            <param name="minor">minor part of version number.</param>
            <param name="patch">patch part of version number.</param>
            <param name="buildrev">build revision of version number.</param>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getVersionString">
            <summary>
            Get the version string of the library.
            
            This function returns the version string of the library.
            </summary>
            <returns>returns a C-string with the version information.</returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getBabyLinPorts(de.lipowsky.BLC.BabyLin.BLC_portInfo_t[],System.Int32@)">
            <summary>
            Retrieve a list of ports a BabyLIN is connected to.
            
            The function doesn't try to connect to the found Ports
            wraps BLC_getBabyLinPortsTimout with timout value set to 1000ms
            </summary>
            <param name="portListToBeFilled">array to be filled</param>
            <param name="pFoundPortCount">the length of the array to be filled</param>
            <returns>the number of connected BabyLINs found (&gt;=0) or &lt; 0 on error</returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getBabyLinPortsTimout(de.lipowsky.BLC.BabyLin.BLC_portInfo_t[],System.Int32@,System.Int32)">
            <summary>
            Retrieve a list of ports a BabyLIN is connected to.
            
            The function doesn't try to connect to the found Ports.
            You can not connect to UDP network devices they are only listed FYI and have to be configured in SimpleMenu mode
            first.
            Network devices of type TCP will have the default Port configured(2048) for connection. If the Device's
            simplemenu-tcp-com-port configuration value was changed. you will have to change the BLC_PORTINFO.port prior to
            connecting via BLC_openPort(...).
            </summary>
            <param name="portListToBeFilled">array to be filled</param>
            <param name="pFoundPortCount">the length of the array to be filled</param>
            <param name="timeoutms">a timeout value in ms to wait for replies of network devices</param>
            <returns>the number of connected BabyLINs found (&gt;=0) or &lt; 0 on error</returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_open(System.Int32)">
             <summary>
             Open a connection to a BabyLIN USB-Serial device.
            
             This function tries to open the designated port and to start communication
             with the device.
             </summary>
             <param name="port">
             the port, the BabyLIN is connected to. It uses Windows-style numbering,
             which means it starts with '1' for the first serial port.
             '0' is reserved.
             On linux systems, the port is represented by the path to the device file ("/dev/ttyUSB0" f.ex.)
             </param>
             <returns>
             Returns an handle for the BabyLIN-connection or NULL if the connection could not be established.
             You may fetch the corresponding (textual) error with BLC_getLastError.
             </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_openNet(System.String,System.Int32)">
            <summary>
            Open a connection to a BabyLIN device using ethernet.
            
            This function tries to open the designated ip and port and to start communication
            with the device.
            </summary>
            <param name="ip">the ip-address of the BabyLIN to connect to</param>
            <param name="port">the ip-port of the BabyLIN toconnected to</param>
            <returns>
            Returns an handle for the BabyLIN-connection or NULL if the connection could not be established.
            you may fetch the corresponding (textual) error with BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_openUSB(System.String)">
            <summary>
            Open a connection to a BabyLIN USB device.
            
            This function tries to open the designated port and to start communication
            with the device.
            </summary>
            <param name="device">the usb device string, the BabyLIN is connected to.</param>
            <returns>
            Returns an handle for the BabyLIN-connection or NULL if the connection could not be established.
            You may fetch the corresponding (textual) error with BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_openPort(de.lipowsky.BLC.BabyLin.BLC_portInfo_t)">
            <summary>
            Open a connection to a BabyLIN device using BLC_PORTINFO information.
            
             This function tries to open the BabyLIN device of the BLC_PORTINFO information, i.e. works as a wrapper for
            BLC_open and BLC_openNet which automatically decides which connection to establish.
            
            latform independent way of connecting to BabyLIN-devices found by BLC_getBabyLinPorts or BLC_getBabyLinPortsTimout
            </summary>
            <param name="portInfo">the BLC_PORTINFO-structure of the BabyLIN to connect to ( see BLC_getBabyLinPorts )</param>
            <returns>
            Returns an handle for the BabyLIN-connection or NULL if the connection could not be established.
            You may fetch the corresponding (textual) error with BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_convertUrl(System.String,de.lipowsky.BLC.BabyLin.BLC_portInfo_t@)">
            <summary>
            Convert a device url to BLC_PORTINFO to use in BLC_openPort
            
            this function tries to convert a given url to a complete struct of type BLC_portInfo_t.
            </summary>
            <param name="url">the device url to convert might be a system path (serial:///dev/ttyUSB1)
            for unix based systems, a comport (serial://COM1) as is used for windows or a network
            addess (tcp://127.0.0.1:2048) to connect to a network device.</param>
            <param name="portInfo">the port info (in case of error, the BLC_portInfo_t structure is left untouched)</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation  BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_close(System.IntPtr)">
            <summary>
            Close connection to Device.
            
            close an open connection, given by handle.
            </summary>
            <param name="handle">Handle representing the connection ( see BLC_open )</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation  BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_closeAll">
             <summary>
             Close ALL connections to ALL Devices.
            
             close all open connections all handles are invalidated
             </summary>
             <returns>
             Status of operation; '=0' means successful, '!=0' otherwise.
             See standard return values for error, or for textual
             representation  BLC_getLastError.
             </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_flush(System.IntPtr)">
            <summary>
            Reset the BabyLIN device to an consistent and deactivated state.
            
            Afterwards, the device will no longer monitor the bus, neither acting as slave
            nor as master.
            </summary>
            <param name="handle">Handle representing a channel; returned previously by BLC_getChannelHandle().</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getTargetID(System.IntPtr,de.lipowsky.BLC.BabyLin.BLC_targetid_t@)">
            <summary>
            Requests the information about the target
            </summary>
            <param name="handle">Handle representing the connection (see BLC_open )</param>
            <param name="targetID">
            pointer to pre-allocated BLC_TARGETID structure to hold the information
            after the successful call
            </param>        
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getHWType(System.IntPtr)">
            <summary>
            Returns the unique hardware type identifier for a device
            </summary>
            <param name="handle">Handle representing the connection ( see BLC_open )</param>
            <returns>
            The hardware type or BabyLIN-error return code. See (BLC_TARGETID.type) for hardware types.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getChannelCount(System.IntPtr)">
            <summary>
            number of channels provided by the BabyLIN-Device
            </summary>
            <param name="handle">Handle representing the connection (see BLC_open)</param>
            <returns>
            number of channels &gt;= 0 or &lt; 0 on error.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getChannelHandle(System.IntPtr,System.Int32)">
            <summary>
            Retrieve a handle to the specified channel
            
            This function returns a channel-handle for the specified channelId.
            A channel-handle is used to control a LIN- or CAN-BUS on the BabyLIN-device.
            </summary>
            <param name="handle">Handle representing the Device connection ( see BLC_open )</param>
            <param name="channelId">
            channelId Identifier for the channel to get the handle of.
            Ranges from 0 to the number of channels supported by the device (see BLC_getChannelCount)
            </param>
            <returns>
            handle to the channel, 0 on error
            You may fetch the corresponding (textual) with BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getChannelInfo(System.IntPtr,de.lipowsky.BLC.BabyLin.BLC_channelInfo_t@)">
            <summary>
            Retrieve informations about the Channel
            </summary>
            <param name="handle">Channelhandle representing the Channel. (see BLC_getChannelHandle)</param>
            <param name="pinfo">
            pointer to pre-allocated BLC_CHANNELINFO structure to hold the information
            after the successful call
            </param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getLastError(System.IntPtr)">
            <summary>
            Returns a C-string with the textual representation of the last error.
            
            Get a textual error message for Errorcodes &lt; -1000.
            </summary>
            <param name="handle">Handle to the erroneous connection or channel.</param>
            <returns> String with textual representation of the last error</returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getErrorString(System.Int32)">
            <summary>
            Returns a C-string with the textual representation of an error code.
            
            Get a textual error message for Errorcodes.
            </summary>
            <param name="error_code">The error code.</param>
            <returns>The textual representation of the error code.</returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getDetailedErrorString(System.Int32,System.Int32)">
            <summary>
            Returns a C-string with detailed textual representation of an error code.
            
            If more than one source may return this error code, the textual representation will contain a list.
            </summary>
            <param name="errorCode">The error code to </param>
            <param name="reportParameter">The second parameter of an event or error report.</param>
            <returns>The detailed textual representation of the error code.</returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_Reset(System.IntPtr)">
            <summary>
            Resets the BabyLIN device to an consistent and deactivated state.
            
            Afterwards, the device will no longer monitor the bus, neither acting as slave
            nor as master.
            </summary>
            <param name="handle">Handle representing the connection. (see BLC_open )</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.ReturnValueToString(System.Int32)">
            <summary>
            Convert the return value to a string.
            </summary>
            <param name="value">Return value from a BabyLIN.BL_... Function. For "BL_sendCommand(handle, "status;");" use the StatusToString( ) Function!</param>
            <returns>Return value as string</returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.ReturnValueToMessage(System.Int32)">
            <summary>
            Convert the return value to a readable message.
            </summary>
            <param name="value">Return value from a BabyLIN.BL_... Function. For "BL_sendCommand(handle, "status;");" use the StatusToString( ) Function!</param>
            <returns>A message matching the return value</returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.StatusToString(System.Int32)">
            <summary>
            Convert the return value from "BLC_sendCommand(handle, "status;");" to a string.
            </summary>
            <param name="status">Return value from BLC_sendCommand(...,"status;")</param>
            <returns>Status as string</returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_loadSDF(System.IntPtr,System.String,System.Int32)">
             <summary>
             Loads the specified SDF-file into library and optionally the BabyLIN device.
            
             The SDF is generated by LINWorks/SessionConf from a LDF file.
             Warning: this resets the device upon download
             </summary>
             <param name="handle">Handle representing the connection. (see BLC_open )</param>
             <param name="filename">
             C-string with the (fully qualified) filename (i.e. "mybus.sdf", if
             in the same directory, or "c:/data/mybus.sdf").
             </param>
             <param name="download">
             boolean value, determines if the SDF profile gets downloaded into
             the BabyLIN device (!=0) or only used in the library (=0).
             </param>
             <returns>
             Status of operation; '=0' means successful, '!=0' otherwise.
             See standard return values for error, or for textual
             representation (for return values &lt; -1000) BLC_getLastError.
             </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_loadLDF(System.IntPtr,System.String,System.Int32)">
            <summary>
            Loads the specified LDFile into library and optionally the BabyLIN device.
            
            Loads a given LDF, converts the LDF to a SDF ( without SDF specific features ) and optionally downloads the generated SDF to the device
            Warning: this resets the device upon download
            </summary>
            <param name="handle">Handle representing the connection. (see BLC_open )</param>
            <param name="filename">
            C-string with the (fully qualified) filename (i.e. "mybus.ldf", if
            in the same directory, or "c:/data/mybus.ldf").
            </param>
            <param name="download">
            boolean value, determines if the generated SDF profile gets downloaded into
            the BabyLIN device (!=0) or only used in the library (=0).
            </param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_downloadSDF(System.IntPtr,System.Int32)">
            <summary>
            Loads the previously loaded SDF-file into the BabyLIN device.
            
            The SDF could be generated by LINWorks/SessionConf from a LDF file and must have been
            loaded previously by an BL_loadSDF() command.
            Warning: this resets the device!
            </summary>
            <param name="handle">Handle representing the connection. (see BLC_open )</param>
            <param name="mode">If mode is '=2' the Download is only performed if the CRC is different from what is currently loaded into the device.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getSDFInfo(System.IntPtr,de.lipowsky.BLC.BabyLin.BLC_sdfInfo_t@)">
            <summary>
            Retrieve further Information about a loaded SDF
            
            Need a loaded SDF (see BLC_loadSDF or BLC_loadLDF )
            </summary>
            <param name="handle">handle to a valid connection</param>
            <param name="pSDFInfo">points to a pre-allocated BLC_SDFINFO to be filled with information</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getSectionInfo(System.IntPtr,System.Int32,de.lipowsky.BLC.BabyLin.BLC_sectionInfo_t@)">
            <summary>
            Retrieve informations about a SDF-Section from a loaded SDF
            </summary>
            <param name="handle">handle of a valid connection</param>
            <param name="infoAboutSectionNr">
            the section number to retrieve information of.
            Ranges from 0 to the number of sections in the loaded SDF (see BLC_getSDFInfo and BLC_SDFINFO.sectionCount )
            </param>
            <param name="pSectionInfo">address of a pre-allocated BLC_SECTIONINFO</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getChannelSectionDescription(System.IntPtr)">
            <summary>
            Retrieve description string of a SDF-Section from a loaded SDF
            </summary>
            <param name="handle">handle of the channel to get the sdf section description of</param>
            <returns>sdf section description</returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getNodeCount(System.IntPtr)">
            <summary>
            Returns the number of nodes on the BUS.
            
            Number of nodes connected to the bus according to the informations in the loaded SDF.
            </summary>
            <param name="handle">Handle representing a channel (see BLC_getChannelHandle )</param>
            <returns>
            Number of nodes connected to the bus according to the informations in the loaded SDF.
            Values &lt;0 on error.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getNodeName(System.IntPtr,System.Int32)">
            <summary>
            Returns the name of a given node
            
            Name of a node connected to the bus according to the informations in the loaded SDF.
            </summary>
            <param name="handle">Handle representing a channel (see BLC_getChannelHandle )</param>
            <param name="idx">Zero based index of requested node entry (see BLC_getNodeCount )</param>
            <returns>the name of a node connected to the bus</returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getFrameCount(System.IntPtr)">
            <summary>
            Returns the number of frames of the BUS description
            
            Number of frames of the bus according to the informations in the loaded SDF.
            </summary>
            <param name="handle">Handle representing the connection; returned previously by
            BL_open().</param>
            <returns>
            Number of frames of the bus according to the informations in the loaded SDF.
            Values &lt;0 on error.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getFrameName(System.IntPtr,System.Int32)">
            <summary>
            Returns the name of a given frame
            
            Name of a frame of the bus according to the informations in the loaded SDF.
            </summary>
            <param name="handle">Handle representing a channel (see BLC_getChannelHandle )</param>
            <param name="idx">Zero based index of requested frame entry (see BLC_getFrameCount )</param>
            <returns>the name of a frame of the bus</returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getSignalCount(System.IntPtr)">
            <summary>
            Returns the number of signals
            
            Number of signals of the bus according to the informations in the loaded SDF.
            </summary>
            <param name="handle">Handle representing a channel (see BLC_getChannelHandle )</param>
            <returns>
            Number of signals of the bus according to the informations in the loaded SDF.
            Values &lt;0 on error.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getSignalName(System.IntPtr,System.Int32)">
            <summary>
            Returns the name of given signal
            
            Name of a signal of the bus according to the informations in the loaded SDF.
            </summary>
            <param name="handle">Handle representing a channel (see BLC_getChannelHandle )</param>
            <param name="idx">Zero based index of requested signal entry (see BLC_getSignalCount )</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_isSignalEmulated(System.IntPtr,System.Int32)">
            <summary>
            Retrieve information about wheather a signal is emulated by the BabyLIN-Device or not
            
            A signal is emulated if the node to which it belongs (according to the SDF) is emulated by the BabyLIN-Device
            (see "setnodesimu" sendCommand in babylin_commands_sdf to change node emulation at runtime )
            </summary>
            <param name="handle">Handle representing a channel (see BLC_getChannelHandle )</param>
            <param name="idx">Zero based index of requested signal entry (see BLC_getSignalCount )</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getSignalSize(System.IntPtr,System.Int32)">
            <summary>
            Retrieve size of a signal
            
            Size of a signal of the bus according to the informations in the loaded SDF.
            </summary>
            <param name="handle">Handle representing a channel (see BLC_getChannelHandle )</param>
            <param name="idx">Zero based index of requested signal entry (see BLC_getSignalCount )</param>
            <returns>
            size of the signal in bits.
            Values &lt;0 on error.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getSignalsInFrameCount(System.IntPtr,System.Int32)">
            <summary>
            Retrieve the number of signals mapped in a frame
            </summary>
            <param name="handle">Handle representing a channel (see BLC_getChannelHandle )</param>
            <param name="frameIndex">Zero based index of requested frame entry (see BLC_getFrameCount )</param>
            <returns>
            Number of signals mapped in the frame
            Values &lt;0 on error.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getSignalInFrame(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Retrieve the signal number of a signal mapped in a frame
            </summary>
            <param name="handle">Handle representing a channel (see BLC_getChannelHandle )</param>
            <param name="frameIndex">Zero based index of the frame the signal is mapped to (see BLC_getFrameCount )</param>
            <param name="signalIndex">Zero based index of the signal as mapped to the frame (see BLC_getSignalsInFrameCount )</param>
            <returns>
            Zero based index of the signal in the SDF
            Values &lt;0 on error.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getFrameDetails(System.IntPtr,System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Returns some details for given frame entry.
            </summary>
            <param name="handle">Handle representing the channel to which the frame belongs</param>
            <param name="idx">Zero based index of requested frame entry (sdf number)</param>
            <param name="pbusid">Pointer to int, which gets filled with BUS ID (without parity bits on LIN-Bus )</param>
            <param name="psize">Pointer to int, which gets filled with size of frame in bytes</param>
            <param name="pnodenum">Pointer to int, which gets filled with nodeindex of publishing node for this frame</param>
            <param name="pframetype">Pointer to int, which gets filled with LIN version of this frame (LIN channel only)</param>
            <returns></returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getNodeForSignal(System.IntPtr,System.Int32)">
            <summary>
            Returns some details for given frame entry.
            </summary>
            <param name="handle">Handle representing the channel to which the signal belongs (see BLC_getChannelHandle )</param>
            <param name="signalNr">Zero based index of the signal entry (sdf number)</param>
            <returns>
            the number of the node the signal is published by.
            -1 if signal is virtual.
            Values &lt; -1 on error.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getFrameNrForFrameId(System.IntPtr,System.UInt32)">
            <summary>
            Retrieve the SDF frame number for a given BUS frame-id
            </summary>
            <param name="handle">Handle representing a channel (see BLC_getChannelHandle )</param>
            <param name="frameId">the BUS frameId to get the frame number
            Special Bits that change the interpretation of frameId:
            Bit 32(0x80000000) : the given Id is a 29Bit ID.</param>
            <returns>
            Zero based index of the frame in the SDF
            Values &lt;0 on error.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getFrameIdForFrameNr(System.IntPtr,System.Byte)">
            <summary>
            Retrieve the BUS frame-id for a given SDF frame number
            </summary>
            <param name="handle">Handle representing a channel (see BLC_getChannelHandle )</param>
            <param name="frameNr">Zero based index of the frame (see BLC_getFrameCount )</param>
            <returns>
            BUS frameId to the given frame index
            Values &lt;0 on error.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_dmStart(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Starts direct mode on channel with given baudrate, bitwidth, stopbits
            and parity settings.
            If the direct mode is already active on the channel, it will be restarted.
            The command prepares the channel with @ref BLC_dmReportConfig settings of 5ms
            and 8 bytes
            </summary>
            <param name="handle">Handle representing the channel to which the frame belongs</param>
            <param name="baudrate">the baudrate to configure while in direct mode.</param>
            <param name="bitwidth">this parameter is not yet used and has to be set to 0. The bitwidth will be 8.</param>
            <param name="stopbits">this parameter is not yet used and has to be set to 0. It will be 1 stopbit.</param>
            <param name="parity">this parameter is not yet used and has to be set to 0. Parity bit is deactivated.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation  BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_dmReportConfig(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            configure the reporting policy of the device
            
            in respect to a timeout and/or a block of bytes.
            The device will report any data read from the bus if the
            read data exceeds the given byte count or after [timeout] milliseconds idle
            time.
            
            direct mode has to be active
            </summary>
            <param name="handle">Handle representing the channel to which the frame belongs</param>
            <param name="timeout">the time in milliseconds until the bus is determined as
            idle resulting in a report of data even thou less then [bytes] data was
            received.</param>
            <param name="bytes">the amount of data after wich a report is generated.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation  BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_dmWrite(System.IntPtr,System.Byte[],System.UInt32)">
            <summary>
            writes data in directmode to the bus
            
            direct mode has to be active
            
            if no bus power is available, the data will be queued to be sent when bus
            power is available
            </summary>
            <param name="handle">Handle representing the channel to which the frame belongs</param>
            <param name="data">the buffer containing the data to send.</param>
            <param name="dataSize">the amount of data in the buffer.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation  BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_dmRead(System.IntPtr,System.Byte[]@,System.UInt32)">
            <summary>
            read data in direct mode.
            
            reads maximum bufferSize bytes to buffer. Will wait for data for infinite
            amount of time.
            </summary>
            <param name="handle">Handle representing the channel to which the frame belongs</param>
            <param name="buffer">the buffer having at least [bufferSize] space to store received data.</param>
            <param name="bufferSize">the amount of data to read.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation  BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_dmReadTimeout(System.IntPtr,System.Byte[]@,System.UInt32,System.UInt32)">
            <summary>
            same as BLC_dmRead with waiting timeout in ms
            </summary>
            <param name="handle">Handle representing the channel to which the frame belongs</param>
            <param name="buffer">the buffer having at least [bufferSize] space to store
            received data.</param>
            <param name="bufferSize">the amount of data to read.</param>
            <param name="timeout_ms">the timeout in milliseconds after which the function
            returns with less then bufferSize data read.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation  BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_dmPulse(System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            issue a pulse on the bus
            
            with a duration of lowtime_us in us. After the pulse, any further action will
            be delayed paddingtime_us
            if no bus power is available, the pulse will be queued to be sent when bus
            power is available
            </summary>
            <param name="handle">Handle representing the channel to which the frame belongs</param>
            <param name="lowtime_us">the time in micro seconds to hold the output on dominant level.</param>
            <param name="paddingtime_us">the time in mico seconds to idle before taking the next action.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation  BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_dmStop(System.IntPtr)">
            <summary>
            stop direct mode
            </summary>
            <param name="handle">Handle representing the channel to which the frame belongs</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation  BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_dmDelay(System.IntPtr,System.UInt32)">
            <summary>
            delay the next operation by the given time.
            this function is an alias for "BLC_dmPulse(channel, 0, paddingtime_us)".
            if no bus power is available, the delay will be queued to be sent when bus
            power is available.
            </summary>
            <param name="handle">Handle representing the channel to which the frame belongs.</param>
            <param name="paddingtime_us">The time in mico seconds to idle before taking the next action.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation  BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_dmPrepare(System.IntPtr,System.Byte)">
            <summary>
            enters or exits the preparation state.
            </summary>
            <param name="handle">Handle representing the channel to which the frame belongs.</param>
            <param name="mode">The preparation mode to set. 1 for entering preparation mode, 0 to exit it.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation  BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.GetWrapperVersion">
            <summary>
            Returns a string with the version information of the .net Wrapper DLL.
            </summary>
            <returns>a version string</returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.ConvertObjectToIntPtr(System.Object)">
            <summary>
            This method converts a Object into a IntPtr.
            It can be used in combination with the userdata callbacks.
            </summary>
            <param name="obj">An object.</param>
            <returns>An IntPtr representing the object.</returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.ConvertIntPtrToObject(System.IntPtr)">
            <summary>
            This method converts a IntPtr into a Object.
            It can be used in combination with the userdata callbacks.
            </summary>
            <param name="ptr">An IntPtr representing the object.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_sendRaw(System.IntPtr,System.Byte[],System.UInt32@)">
            <summary>
            Send a (raw!) command to the BabyLIN device.
            
            Warning: The command must be encoded in the binary DP-Message format of BabyLIN.
            </summary>
            <param name="handle">Handle representing the connection. (see BLC_open )</param>
            <param name="command">char*-Buffer with the designated command(s).</param>
            <param name="length">length of buffer; gets set to actual sent command's length.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_setDTLMode(System.IntPtr,System.Int32)">
            <summary>
            Set the Diagnostic Transport Layer mode.
            
            There are different Diagnostic modes, which offer different levels of protocol functionality.
            The Baby-LIN will start with Diagnostic OFF on Power Up.
            If the BabyLIN acts as LIN master then the selection of an Diagnostic Mode happens trough the usage
            of the appropriate API function calls. So the API functions BL_sendRawMasterRequest or BL_sendRawSlaveResponse
            will start  the Diagnostic RAW mode, where as the API calls BL_sendDTLRequest or BL_sendDTLResponse will start the
            Diagnostic DTL mode.
            If the BabyLIN acts as LIN slave then the DTL mode must be set by use of this function.
            It is not possible to use different Diagnostics modes at the same time !
            
            List of DTL modes:
            | Mode | Name | Description |
            |-----:|:-----|:------------|
            |0 | DTL_NONE | no DTL Support |
            |1 | DTL_RAW  | RAW Mode DTL Support |
            |2 | DTL_COOKED | Cooked Mode DTL Support |
            </summary>
            <param name="handle">Handle representing a LIN-channel (see BLC_getChannelHandle )</param>
            <param name="mode">DTL mode:
            0 = DTL_NONE = no DTL Support
            1 = DTL_RAW = RAW Mode DTL Support
            2 = DTL_COOKED = Cooked Mode DTL Support</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_sendDTLRequest(System.IntPtr,System.Byte,System.Int32,System.Byte[])">
            <summary>
            Send a DTL MasterReq to a node
            </summary>
            <param name="handle">Handle representing a LIN-channel (see BLC_getChannelHandle )</param>
            <param name="nad">NAD of the node the request gets send to.</param>
            <param name="length">Length of the following data array.</param>
            <param name="data">DTL frame data (begins with SID, followed by up to 4095 data bytes).</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_sendDTLResponse(System.IntPtr,System.Byte,System.Int32,System.Byte[])">
            <summary>
            Send a DTL SlaveResp to a node
            </summary>
            <param name="handle">Handle representing a LIN-channel (see BLC_getChannelHandle )</param>
            <param name="nad">NAD of the node the response gets send for.</param>
            <param name="length">Length of the following data array.</param>
            <param name="data">DTL frame data (begins with RSID, followed by up to 4095 data bytes).</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_sendRawSlaveResponse(System.IntPtr,System.Byte[],System.Byte[],System.Byte[],System.Int32)">
             <summary>
             Send a (non-DTL) SlaveResp upon receive of matching MasterReq.
            
             Upon the reveive of the next MasterReq frame, every bit of the request is compared to
             'reqdata' if the corresponding bit of 'reqmask' is set (1). If all match, Baby-LIN starts
             to send out the data given in 'data', 8 bytes with each SlaveResp frame.
             </summary>
             <param name="handle">Handle representing a LIN-channel (see BLC_getChannelHandle )</param>
             <param name="reqdata">Data of the expected MasterReq (exactly 8 bytes).</param>
             <param name="reqmask">Mask for 'reqdata' to indicate which bits must match (exactly 8 bytes).</param>
             <param name="data">MasterReq frame data (multiple of 8 bytes).</param>
             <param name="length">Length of data to send.</param>
             <returns>
             Status of operation; '=0' means successful, '!=0' otherwise.
             See standard return values for error, or for textual
             representation (for return values &lt; -1000) BLC_getLastError.
             </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_sendRawMasterRequest(System.IntPtr,System.Byte[],System.Int32)">
            <summary>
            Send a (non-DTL) MasterReq with the specified 8 bytes as data.
            
            The internal raw-SlaveResponse-buffer is being reset and the Baby-LIN device gets
            instructed to report the next 'count' SlaveResp-frames which in turn are accumulated
            into the SlaveResponse-buffer which can be queried by BL_getRawSlaveResponse().
            </summary>
            <param name="handle">Handle representing a LIN-channel (see BLC_getChannelHandle )</param>
            <param name="data">MasterReq frame data (exactly 8 bytes).</param>
            <param name="count">Number of expected SlaveResp frames.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getDTLRequestStatus(System.IntPtr)">
            <summary>
            Returns the status of the last request-send operation.
            </summary>
            <param name="handle">Handle representing a LIN-channel (see BLC_getChannelHandle )</param>
            <returns>
            Status of last request operation if >= 0; see BL_DTL_STATUS for
            values.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getDTLResponseStatus(System.IntPtr)">
            <summary>
            Returns the status of the last resonse-send operation.
            </summary>
            <param name="handle">Handle representing a LIN-channel (see BLC_getChannelHandle )</param>
            <returns>
            Status of last request operation if >= 0; see BL_DTL_STATUS for
            values.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getRawSlaveResponse(System.IntPtr,System.Byte[],System.Int32)">
            <summary>
            Returns the first 'count' bytes of the current SlaveResp-buffer.
            
            The internal raw-SlaveResponse-buffer is filled continuously with the data bytes of
            reported SlaveResp-frames and is being reset upon every call of BL_sendRawMasterRequest().
            </summary>
            <param name="handle">Handle representing a LIN-channel (see BLC_getChannelHandle )</param>
            <param name="data">Pointer to char array which gets filled (must hold min. 'length' bytes).</param>
            <param name="length">How many bytes should get returned.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_updRawSlaveResponse(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="handle">Handle representing a LIN-channel (see BLC_getChannelHandle )</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_lastAnswerHasData(System.IntPtr)">
            <summary>
            Returns BL_OK if the last answer to a command, send to the given
            handle, contained additional data.
            
            If there is no additional data present it returns BL_NO_ANSWER_DATA.
            </summary>
            <param name="handle">Handle representing a channel (see BLC_getChannelHandle )</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getAnswerTypeByName(System.IntPtr,System.String,de.lipowsky.BLC.BabyLin.BLC_ANSWER_TYPE@,System.UInt32@)">
            <summary>
            Get type of a parameter of the last answer data from a BabyLIN
            
            If the last answer to a command contained additional data, then this function reports
            the type and size for a specific answer data set. Data set selected by name.
            The following types of data sets are possible:
                 BLC_ANSWER_TYPE_INT - 32bit integer,
                 BLC_ANSWER_TYPE_STR - zero-terminated string (variable length),
                 BLC_ANSWER_TYPE_BIN - binary data (variable length)
            </summary>
            <param name="handle">Handle representing the channel on which the answer data was received (see BLC_getChannelHandle )</param>
            <param name="name">char*-string with the name of answer data set</param>
            <param name="type">
            type of data set is returned within:
                 BLC_ANSWER_TYPE_INT - 32bit integer,
                 BLC_ANSWER_TYPE_STR - zero-terminated string (variable length),
                 BLC_ANSWER_TYPE_BIN - binary data (variable length)
            </param>
            <param name="length">length of data set is returned within</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getAnswerNameByIndex(System.IntPtr,System.Int32)">
            <summary>
            Get name of a parameter of the last answer data from a BabyLIN
            </summary>
            <param name="handle">Handle representing the channel on which the answer data was received (see BLC_getChannelHandle )</param>
            <param name="index">zero-based index of the answer data set</param>
            <returns>
            The name of a parameter of the last answer data from a BabyLIN
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getAnswerTypeByIndex(System.IntPtr,System.UInt32,de.lipowsky.BLC.BabyLin.BLC_ANSWER_TYPE@,System.UInt32@)">
            <summary>
            Get type of a parameter of the last answer data from a BabyLIN
            
            If the last answer to a command contained additional data, then this function reports
            the type and size for a specific answer data set. Data set selected by name.
            The following types of data sets are possible:
                 BLC_ANSWER_TYPE_INT - 32bit integer,
                 BLC_ANSWER_TYPE_STR - zero-terminated string (variable length),
                 BLC_ANSWER_TYPE_BIN - binary data (variable length)
            </summary>
            <param name="handle">Handle representing the channel on which the answer data was received (see BLC_getChannelHandle )</param>
            <param name="index">char*-string with the name of answer data set</param>
            <param name="type">
            type of data set is returned within:
                 BLC_ANSWER_TYPE_INT - 32bit integer,
                 BLC_ANSWER_TYPE_STR - zero-terminated string (variable length),
                 BLC_ANSWER_TYPE_BIN - binary data (variable length)
            </param>
            <param name="length">length of data set is returned within</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getAnswerByName(System.IntPtr,System.String,System.Byte[],System.UInt32)">
            <summary>
            Get the value of a parameter of the last answer data from a BabyLIN
            
            If the last answer to a command contained additional data, then this function copies
            the answer data set over into the destination buffer. Data set selected by name.
            </summary>
            <param name="handle">Handle representing the channel on which the answer data was received (see BLC_getChannelHandle )</param>
            <param name="name">char*-string with the name of answer data set</param>
            <param name="buffer">pointer to destination buffer for the data set</param>
            <param name="length">length of destination buffer</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getAnswerByIndex(System.IntPtr,System.UInt32,System.Byte[],System.UInt32)">
            <summary>
            Get the value of a parameter of the last answer data from a BabyLIN
            
            If the last answer to a command contained additional data, then this function copies
            the answer data set over into the destination buffer. Data set selected by index.
            </summary>
            <param name="handle">Handle representing the channel on which the answer data was received (see BLC_getChannelHandle )</param>
            <param name="index">zero-based index of the answer data set</param>
            <param name="buffer">pointer to destination buffer for the data set</param>
            <param name="length">length of destination buffer</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_sendCommand(System.IntPtr,System.String)">
            <summary>
            Send a command to the BabyLIN device.
            
            The command must match the command syntax as specified in the BabyLIN
            documentation (see babylin_commands). The trailing ';' may be omitted; you may specify
            several commands at once! LIKE "start; disframe 0 1; stop"
            </summary>
            <param name="handle">Handle representing the channel to send the command to (see BLC_getChannelHandle )</param>
            <param name="command">C-string with the command (i.e. "status;")</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_setsig(System.IntPtr,System.Int32,System.UInt64)">
            <summary>
            Shorthand for "setsig" command (see babylin_commands)
            </summary>
            <param name="handle">Handle representing the channel to send the command to (see BLC_getChannelHandle )</param>
            <param name="signalNr">the signal to set the value</param>
            <param name="value">the value to assign to the signal</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_mon_set(System.IntPtr,System.Int32,System.Int32[],System.Int32)">
            <summary>
            Shorthand for "mon_set" command (see babylin_commands)
            </summary>
            <param name="handle">Handle representing the channel to send the command to (see BLC_getChannelHandle )</param>
            <param name="frameid">the BUS-frame-id to set the framedata for</param>
            <param name="databytes">array of databytes to use as the framedata</param>
            <param name="len">the length of the data</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_mon_xmit(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Shorthand for "mon_xmit" command (see babylin_commands)
            </summary>
            <param name="handle">Handle representing the channel to send the command to (see BLC_getChannelHandle )</param>
            <param name="frameid">he BUS-frame-id to transmit</param>
            <param name="slottime">Slottime = 0 equals a single transmit, slottime > 0 equals cyclic transmission of frame</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_mon_set_xmit(System.IntPtr,System.Int32,System.Int32[],System.Int32,System.Int32)">
            <summary>
            Shorthand for "mon_set" followed by "mon_xmit" command (see babylin_commands)
            </summary>
            <param name="handle">Handle representing the channel to send the command to (see BLC_getChannelHandle )</param>
            <param name="frameid">the BUS-frame-id to set and transmit</param>
            <param name="databytes">array of databytes to use as the framedata</param>
            <param name="len">the length of the data</param>
            <param name="slottime">slottime = 0 equals a single transmit, slottime > 0 equals cyclic transmission of frame</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_macro_result(System.IntPtr,System.Int32,System.Int64@,System.UInt32)">
            <summary>
            convenience function for command "macro_result" handling answer data
            Executes "macro_result" in a loop until "macro_result" returns anything else
            than 150 (macro still running), or timeout_ms is exceeded
            A possible return value of "macro_result" is stored into return_value if the
            returncode was 155 (finished with error) or 0 (macro finished)
            </summary>
            <param name="handle">Handle representing the channel to send the command to (see BLC_getChannelHandle )</param>
            <param name="macro_nr">The macro that should be queried.</param>
            <param name="return_value">The return value or error code of the macro.</param>
            <param name="timeout_ms">The maximum time the function is waiting for the macro to finish.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getMacroResultString(System.IntPtr,System.Int32)">
            <summary>
            Returns the result string of given macro, if it was set within the macro.
            </summary>
            <param name="handle">Handle representing the channel to send the command to (see BLC_getChannelHandle )</param>
            <param name="macro_nr">The macro that should be queried.</param>
            <returns>The result string of the given macro</returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_varRead(System.IntPtr,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Returns the result of a "varrd" command in a convienent way.
            Reads a number of signal values and puts them directly into a bytearray.
            Performs the same operation as a @ref BLC_sendCommand with "varrd"
            but only allows 8bit signals to be read.
            This call blocks until all data is read and returned.
            </summary>
            <param name="handle">Handle representing the channel to send the command to (see BLC_getChannelHandle )</param>
            <param name="signal_nr">The macro that should be queried.</param>
            <param name="dstbuf">Array which gets filled (must hold min. 'buflen' bytes).</param>
            <param name="length">How many signals should be read.</param>
            <returns>Status of operation; '=0' means successful, '!=0' otherwise. See standard return values for error, or for textual representation (for return values &lt; -10000)</returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_varWrite(System.IntPtr,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Writes an array of signals to values given by a bytearray.
            
            Writes "data_len" number of signals, starting from "signal_nr" with byte
            values from the "data" array.
            Performs the same operation as BLC_sendCommand with "varwr" in mode 1, but only allows 8bit values to be set.
            </summary>
            <param name="handle">Handle representing the channel to send the command to (see BLC_getChannelHandle )</param>
            <param name="signal_nr">The index of the first signal to write.</param>
            <param name="data">Byte array with data to write. Each byte will be written in one signal.</param>
            <param name="data_len">How long the data buffer is. Also defines how many signals are writtrn.</param>
            <returns>Status of operation; '=0' means successful, '!=0' otherwise. See standard return values for error, or for textual representation (for return values &lt; -10000)</returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.ConvertMessageIdToProtectedId(System.Byte)">
            <summary>
            Converts a message ID into a protected ID.
            </summary>
            <param name="messageId">The message ID.</param>
            <returns>The protected ID.</returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.ConvertProtectedIdToMessageId(System.Byte)">
            <summary>
            Converts a protected ID into a message ID.
            </summary>
            <param name="protectedId">The protected ID.</param>
            <returns>The message ID.</returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.SDF_open(System.String)">
            <summary>
            loads a SDFile to memory and returns a SDF_HANDLE
            </summary>
            <param name="filename">the filename to load, can be absolute or relative to the current working directory</param>
            <returns>to the loaded SDFile or 0 on error.</returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.SDF_openLDF(System.String)">
            <summary>
            loads a LDFFile to memory, creates a temporary SDF and returns a SDF_HANDLE
            </summary>
            <param name="filename">the filename to load, can be absolute or relative to the current working directory</param>
            <returns>to the loaded SDFile or 0 on error.</returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.SDF_close(System.IntPtr)">
            <summary>
            closes a SDFile opened using @SDF_open
            </summary>
            <param name="handle">the SDFile handle to close</param>
            <returns>0 on success</returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.SDF_downloadToDevice(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            download a SDFile to a BabyLIN device
            </summary>
            <param name="sdfhandle"> the SDFile from SDF_open to download</param>
            <param name="blchandle"> the BabyLIN connection handle from BLC_open to download to</param>
            <param name="mode"> see BLC_loadSDF modes</param>
            <returns>see BLC_loadSDF returncodes (0 = success).</returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.SDF_downloadSectionToChannel(System.IntPtr,System.IntPtr)">
            <summary>
            download a SDFile to a BabyLIN device
            </summary>
            <param name="sectionhandle">the SDFile from SDF_open to download</param>
            <param name="channelhandle">the BabyLIN channel handle from @BLC_getChannelHandle to download to</param>
            <returns>see BLC_loadSDF returncodes (0 = success)</returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.SDF_getSectionCount(System.IntPtr)">
            <summary>
            get number of sections in SDF
            </summary>
            <param name="sdfhandle">the SDFile from SDF_open</param>
            <returns>number of sections (negative value on error)</returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.SDF_getSectionHandle(System.IntPtr,System.Int32)">
            <summary>
            SDF_getSectionHandle get handle to a section of a sdf
            </summary>
            <param name="sdfhandle">the handle of the sdf to get the section handle from</param>
            <param name="sectionNr">the section number to get the handle for</param>
            <returns>see BLC_loadSDF returncodes (0 = success)</returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.SDF_getSectionInfo(System.IntPtr,de.lipowsky.BLC.BabyLin.SDF_sectionInfo_t@)">
            <summary>
            SDF_getSectionInfo get information about a section
            </summary>
            <param name="sectionhandle">the section handle to retrieve informations about</param>
            <param name="sectionInfo">pointer to pre-allocated SDF_SECTIONINFO structure to fill</param>
            <returns>0 on success</returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_SDF_getNodeNr(System.IntPtr,System.String)">
            <summary>
            Get the SDF's number for node by name.
            </summary>
            <param name="handle">Handle representing the connection; returned previously by getChannelHandle().</param>
            <param name="name">Name of the node.</param>
            <returns>Returns the node's number or -1 if there's no signal with
            specified name. Even smaller numbers designate error codes
            as defined in BabyLIN.h.</returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_SDF_getSignalNr(System.IntPtr,System.String)">
            <summary>
            Get the SDF's number for signal by name.
            </summary>
            <param name="handle">Handle representing the connection; returned previously by getChannelHandle().</param>
            <param name="name">Name of the signal.</param>
            <returns>Returns the signal's number or -1 if there's no signal with
            specified name. Even smaller numbers designate error codes
            as defined in BabyLIN.h.</returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_SDF_getFrameNr(System.IntPtr,System.String)">
            <summary>
            Get the SDF's number for frame by name.
            </summary>
            <param name="handle">Handle representing the connection; returned previously by getChannelHandle().</param>
            <param name="name">Name of the frame.</param>
            <returns>Returns the frame's number or -1 if there's no frame with
            specified name. Even smaller numbers designate error codes
            as defined in BabyLIN.h.</returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_SDF_getScheduleNr(System.IntPtr,System.String)">
            <summary>
            Get the SDF's number for schedule by name.
            </summary>
            <param name="handle">Handle representing the connection; returned previously by getChannelHandle().</param>
            <param name="name">Name of the schedule.</param>
            <returns>Returns the schedule's number or -1 if there's no schedule with
            specified name. Even smaller numbers designate error codes
            as defined in BabyLIN.h.</returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_SDF_getNumSchedules(System.IntPtr)">
            <summary>
            Get the number of schedule tables in the SDF.
            </summary>
            <param name="handle">Handle representing the connection; returned previously by getChannelHandle().</param>
            <returns>
            Returns the number of schedule tablesname or 0 if there's no schedule defined.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_SDF_getScheduleName(System.IntPtr,System.Int32)">
            <summary>
            Get the SDF's name of schedule by number.
            </summary>
            <param name="handle">Handle representing the connection; returned previously by getChannelHandle().</param>
            <param name="schedule_nr">Index of the schedule.</param>
            <returns>Returns the schedule's number or -1 if there's no schedule with
            specified name. Even smaller numbers designate error codes
            as defined in BabyLIN.h.</returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_SDF_getMacroNr(System.IntPtr,System.String)">
            <summary>
            Get the SDF's number for macro by name.
            </summary>
            <param name="handle">Handle representing the connection; returned previously by getChannelHandle().</param>
            <param name="name">Name of the macro.</param>
            <returns>Returns the macro's number or -1 if there's no macro with
            specified name. Even smaller numbers designate error codes
            as defined in BabyLIN.h.</returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getLastFrame(System.IntPtr,System.Int32,de.lipowsky.BLC.BabyLin.BLC_frame_t@)">
            <summary>
            Retrieve the last framedata available for a frame.
            
            Important: The Baby-LIN fills the receiver queue only if command "disframe"  or "mon_on" is sent before ( see babylin_commands )
            </summary>
            <param name="handle">Handle representing the channel to get the frame data from (see BLC_getChannelHandle )</param>
            <param name="frameNr">Zero based index of requested frame entry.</param>
            <param name="framedata">Pointer to a pre-allocated BLC_FRAME structure.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getNextFrame(System.IntPtr,de.lipowsky.BLC.BabyLin.BLC_frame_t@)">
            <summary>
            Fetches the next frame on Channel from the receiver queue.
            
            Important: The Device fills the receiver queue only if command "disframe" or "mon_on" is sent before.
            </summary>
            <param name="handle">Handle representing the channel to get the frame data from (see BLC_getChannelHandle )</param>
            <param name="framedata">Pointer to a pre-allocated BLC_frame_t structure.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getNextJumboFrame(System.IntPtr,de.lipowsky.BLC.BabyLin.BLC_jumboframe_t@)">
            <summary>
            Fetches the next jumbo frame on Channel from the receiver queue.
            
            Important: The Device fills the receiver queue only if command "disframe" or "mon_on" is sent before.
            </summary>
            <param name="handle">Handle representing the channel to get the jumbo frame data from (see BLC_getChannelHandle )</param>
            <param name="framedata">Pointer to a pre-allocated BLC_jumboframe_t structure.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getNextFrames(System.IntPtr,de.lipowsky.BLC.BabyLin.BLC_frame_t[],System.Int32@)">
            <summary>
            Fetches the next frames on channel from the receiver queue.
            
            Important: The device fills the receiver queue only if command "disframe" or "mon_on" sent before.
            </summary>
            <param name="handle">Handle representing the channel to get the frame data from (see BLC_getChannelHandle )</param>
            <param name="framedata">Pointer to a pre-allocated BLC_frame_t (structure) array.</param>
            <param name="size">
            Input/Output parameter. On input, size of the pre-allocated BLC_frame_t (structure) array,
            in units of BLC_FRAME, which must be a positive value.
            On output, the actual number of retrieved BLC_frame_ts, which might be less
            than *size on input.
            </param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getNextJumboFrames(System.IntPtr,de.lipowsky.BLC.BabyLin.BLC_jumboframe_t[],System.Int32@)">
            <summary>
            Fetches the next jumbo frames on channel from the receiver queue.
            
            Important: The device fills the receiver queue only if command "disframe" or "mon_on" sent before.
            </summary>
            <param name="handle">Handle representing the channel to get the jumbo frame data from (see BLC_getChannelHandle )</param>
            <param name="framedata">Pointer to a pre-allocated BLC_jumboframe_t (structure) array.</param>
            <param name="size">
            Input/Output parameter. On input, size of the pre-allocated BLC_JUMBO_FRAME (structure) array,
            in units of BLC_JUMBO_FRAME, which must be a positive value.
            On output, the actual number of retrieved BLC_jumboframe_t, which might be less
            than *size on input.
            </param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getNextFrameTimeout(System.IntPtr,de.lipowsky.BLC.BabyLin.BLC_frame_t@,System.Int32)">
            <summary>
            Fetches the next frame on Channel from the receiver queue with wait-timeout.
            
            Retrieves the next frame received from the BabyLIN.
            If no frame-data is available, the funktion will wait _up to_ timeout_ms milliseconds
            for new data before it returns with a BL_TIMEOUT returncode
            Important: The Device fills the receiver queue only if command "disframe" or "mon_on" is sent before.
            </summary>
            <param name="handle">Handle representing the channel to get the frame data from (see BLC_getChannelHandle )</param>
            <param name="framedata">Pointer to a pre-allocated BLC_frame_t structure.</param>
            <param name="timeout_ms">timout to wait for new framedata</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getNextJumboFrameTimeout(System.IntPtr,de.lipowsky.BLC.BabyLin.BLC_jumboframe_t@,System.Int32)">
            <summary>
            Fetches the next jumbo frame on Channel from the receiver queue with wait-timeout.
            
            Retrieves the next jumbo frame received from the BabyLIN.
            If no frame-data is available, the funktion will wait _up to_ timeout_ms milliseconds
            for new data before it returns with a BL_TIMEOUT returncode
            Important: The Device fills the receiver queue only if command "disframe" or "mon_on" is sent before.
            </summary>
            <param name="handle">Handle representing the channel to get the jumbo frame data from (see BLC_getChannelHandle )</param>
            <param name="framedata">Pointer to a pre-allocated BLC_jumboframe_t structure.</param>
            <param name="timeout_ms">timout to wait for new framedata</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getNextFramesTimeout(System.IntPtr,de.lipowsky.BLC.BabyLin.BLC_frame_t[],System.Int32,System.Int32@)">
            <summary>
            Fetches the next frames on channel from the receiver queue with wait-timeout.
            
            Retrieves the next frames received from the BabyLIN.
            If no frame-data is available, the funktion will wait _up to_ timeout_ms milliseconds
            for new data before it returns with a BL_TIMEOUT returncode
            Important: The Device fills the receiver queue only if command "disframe" or "mon_on" is sent before.
            </summary>
            <param name="handle">Handle representing the channel to get the frame data from (see BLC_getChannelHandle )</param>
            <param name="framedata">Pointer to a pre-allocated BLC_FRAME structure.</param>
            <param name="timeout_ms">timout to wait for new framedata</param>
            <param name="size">
            Input/Output parameter. On input, size of the pre-allocated BLC_FRAME (structure) array,
            in units of BLC_FRAME, which must be a positive value.
            On output, the actual number of retrieved BLC_FRAMEs, which might be less
            than *size on input.
            </param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getNextJumboFramesTimeout(System.IntPtr,de.lipowsky.BLC.BabyLin.BLC_jumboframe_t[],System.Int32,System.Int32@)">
            <summary>
            Fetches the next jumbo frames on channel from the receiver queue with wait-timeout.
            
            Retrieves the next jumbo frames received from the BabyLIN.
            If no frame-data is available, the funktion will wait _up to_ timeout_ms milliseconds
            for new data before it returns with a BL_TIMEOUT returncode
            Important: The Device fills the receiver queue only if command "disframe" or "mon_on" is sent before.
            </summary>
            <param name="handle">Handle representing the channel to get the jumbo frame data from (see BLC_getChannelHandle )</param>
            <param name="framedata">Pointer to a pre-allocated BLC_jumboframe_t structure.</param>
            <param name="timeout_ms">timout to wait for new jumbo framedata</param>
            <param name="size">
            Input/Output parameter. On input, size of the pre-allocated BLC_jumboframe_t (structure) array,
            in units of BLC_FRAME, which must be a positive value.
            On output, the actual number of retrieved BLC_jumboframe_ts, which might be less
            than *size on input.
            </param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getNextSignal(System.IntPtr,de.lipowsky.BLC.BabyLin.BLC_signal_t@)">
            <summary>
            Fetches the next signal from the receiver queue.
            
            Important: The Baby-LIN fills the receiver queue only if command "dissignal" sent before.
            </summary>
            <param name="handle">Handle representing the channel to get the signal data from (see BLC_getChannelHandle )</param>
            <param name="signaldata">Pointer to a pre-allocated BLC_SIGNAL structure.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getNextSignals(System.IntPtr,de.lipowsky.BLC.BabyLin.BLC_signal_t[],System.Int32@)">
            <summary>
            Fetches the next signals from the receiver queue.
            
            Important: The Baby-LIN fills the receiver queue only if command "dissignal" sent before.
            </summary>
            <param name="handle">Handle representing the channel to get the signal data from (see BLC_getChannelHandle )</param>
            <param name="signaldata">Pointer to a pre-allocated BLC_SIGNAL (structure) array.</param>
            <param name="size">
            Input/Output parameter. On input, size of the pre-allocated BLC_SIGNAL (structure) array,
            in units of BLC_SIGNAL, which must be a positive value.
            On output, the actual number of retrieved BLC_SIGNALs, which might be less
            than *size on input.
            </param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getNextSignalsForNumber(System.IntPtr,de.lipowsky.BLC.BabyLin.BLC_signal_t[],System.Int32,System.Int32)">
             <summary>
             Fetches the next signals for a specific signal from the receiver queue.
            
             Important: The Baby-LIN fills the receiver queue only if command "dissignal" sent before.
             Important: This function will remove the signal values from the queue. Further signal receiving is no longer guaranteed to be in order.
             </summary>
             <param name="handle">Handle representing the channel to get the signal data from (see BLC_getChannelHandle )</param>
             <param name="signaldata">Pointer to a pre-allocated BLC_SIGNAL (structure) array.</param>
             <param name="size">
             Size of the pre-allocated BLC_SIGNAL (structure) array,
             in units of BLC_SIGNAL, which must be a positive value.
             </param>
             <param name="signalNumber">the signal number to get the signals for</param>
             <returns>
             number of signals found; '&lt;0' on error.
             See standard return values for error, or for textual
             representation (for return values &lt; -1000) BLC_getLastError.
             </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getNextBusError(System.IntPtr,de.lipowsky.BLC.BabyLin.BLC_error_t@)">
            <summary>
            Fetches the next Bus error from the receiver queue.
            </summary>
            <param name="handle">Handle representing the channel to get the error data from (see BLC_getChannelHandle )</param>
            <param name="errordata">Pointer to a pre-allocated BL_error_t structure.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getNextDTLRequest(System.IntPtr,de.lipowsky.BLC.BabyLin.BLC_dtl_t@)">
            <summary>
            Fetches the next complete DTL request from the receiver queue.
            </summary>
            <param name="handle">Handle representing the channel to get the dtl data from (see BLC_getChannelHandle )</param>
            <param name="frame">Pointer to a pre-allocated BLC_DTL structure.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getNextDTLResponse(System.IntPtr,de.lipowsky.BLC.BabyLin.BLC_dtl_t@)">
            <summary>
            Fetches the next complete DTL response from the receiver queue.
            </summary>
            <param name="handle">Handle representing the channel to get the dtl data from (see BLC_getChannelHandle )</param>
            <param name="frame">Pointer to a pre-allocated BL_dtl_t structure.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getSignalValue(System.IntPtr,System.Int32,System.UInt64@)">
             <summary>
             Return the current signal value (for non-array signals).
             Important: The Baby-LIN reports the signal value only if command "dissignal" sent before.
            
             Note: Special signalNr '-1' returns always 4711 in *value; signalNr '-2' returns a counter
             increased by 1 after every call.
             </summary>
             <param name="handle">Handle representing the channel to get the signal value from (see BLC_getChannelHandle )</param>
             <param name="signalNr">Number of the signal according to SDF.</param>
             <param name="value">Pointer to an word-sized variable getting the value.</param>
             <returns>
             Status of operation; '=0' means successful, '!=0' otherwise.
             See standard return values for error, or for textual
             representation (for return values &lt; -1000) BLC_getLastError.
             </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getSignalValueWithTimestamp(System.IntPtr,System.Int32,System.UInt64@,System.UInt64@)">
            <summary>
            Return the current signal value (for non-array signals) with timestamp.
            Important: The Baby-LIN reports the signal value only if command "dissignal" sent before.
            
            Note: Special signalNr '-1' returns always 4711 in *value; signalNr '-2' returns a counter
            increased by 1 after every call.
            </summary>
            <param name="handle">Handle representing the channel to get the signal value from (see BLC_getChannelHandle )</param>
            <param name="signalNr">Number of the signal according to SDF.</param>
            <param name="value">Pointer to an word-sized variable getting the value.</param>
            <param name="timestamp">Pointer to an word-sized variable getting the timestamp when the signal was received (PC-Timestamp (ms)).</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getSignalValueByName(System.IntPtr,System.String,System.UInt64@)">
            <summary>
            Returns the current signal value (for non-array signals).
            
            Important: The Baby-LIN reports the signal value only if command "dissignal" sent before.
            </summary>
            <param name="handle">Handle representing the channel to get the signal value from (see BLC_getChannelHandle )</param>
            <param name="signalName">Name of the Signal as declared in LDF.</param>
            <param name="value">Pointer to an word-sized variable getting the value.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getSignalArray(System.IntPtr,System.Int32,System.Byte[])">
            <summary>
            Returns the current signal value (for array signals).
            Important: The Baby-LIN reports the signal value only if command "dissignal" sent before.
            Note: Special signalNr '-1' returns always the hex array { 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef } in *array;
            signalNr '-2' returns a counted sequence, where the byte 0 holds the actual counter and the following bytes hold
            the 'history'; i.e.:
            
            1st call: { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }
            
            2nd call: { 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }
            
            3rd call: { 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }
            
            4th call: { 0x03, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00 }
            
            ...etc...
            </summary>
            <param name="handle">Handle representing the channel to get the signal value from (see BLC_getChannelHandle )</param>
            <param name="signalNr">Number of the signal accordng to SDF.</param>
            <param name="array">
            Pointer to an 8 byte array getting the value. It must always have the size
            of 8 bytes, even for smaller array signals!
            </param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getSignalArrayWithTimestamp(System.IntPtr,System.Int32,System.Byte[],System.UInt64@)">
            <summary>
            Returns the current signal value (for array signals) with timstamp.
            Important: The Baby-LIN reports the signal value only if command "dissignal" sent before.
            Note: Special signalNr '-1' returns always the hex array { 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef } in *array;
            signalNr '-2' returns a counted sequence, where the byte 0 holds the actual counter and the following bytes hold
            the 'history'; i.e.:
            
            1st call: { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }
            
            2nd call: { 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }
            
            3rd call: { 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }
            
            4th call: { 0x03, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00 }
            
            ...etc...
            </summary>
            <param name="handle">Handle representing the channel to get the signal value from (see BLC_getChannelHandle )</param>
            <param name="signalNr">Number of the signal accordng to SDF.</param>
            <param name="array">
            Pointer to an 8 byte array getting the value. It must always have the size
            of 8 bytes, even for smaller array signals!
            </param>
            <param name="timestamp">Pointer to an word-sized variable getting the timestamp when the signal was received (PC-Timestamp (ms)).</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getSignalArrayByName(System.IntPtr,System.String,System.Byte[])">
            <summary>
            Returns the current signal value (for array signals).
            
            Important: The Baby-LIN reports the signal value only if command "dissignal" sent before.
            </summary>
            <param name="handle">Handle representing the channel to get the signal value from (see BLC_getChannelHandle )</param>
            <param name="signalName">Name of the Signal as declared in LDF.</param>
            <param name="array">
            Pointer to an 8 byte array getting the value. It must always have the size
            of 8 bytes, even for smaller array signals!
            </param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_isSignalArray(System.IntPtr,System.Int32)">
            <summary>
            Returns the type of a signal
            </summary>
            <param name="handle">Handle representing the channel to which the signal belongs (see BLC_getChannelHandle )</param>
            <param name="idx">Zero based index of requested signal entry.</param>
            <returns>
            Status of operation; Signal is Array == 1; Signal is scalar Value == 0.
            Values &lt;0 on error.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_encodeSignal(System.IntPtr,System.Int32,System.UInt64,System.String@,System.String@)">
            <summary>
            Encodes the signal's value as defined in the corresponding Signal Encoding tables of LDF/SDF.
            
            If no SignalEncoding is specified for this signal, the value itself is written into destination buffer 'description'.
            If one of the required pointers is NULL or the buffer size is too small, the function returns the needed minimum buffer
            length in 'length'.
            It's possible to use two variants to get encoded signal:
              1) pointer 'encUnit' and 'buffLen1' set to NULL: then encoded signal saved inclusive unit in buffer 'encSignal'
              2) pointer 'encUnit' and 'buffLen1' != NULL: unit of signal saved separately in buffer 'encUnit'
            </summary>
            <param name="handle">Handle representing the channel to which the signal belongs (see BLC_getChannelHandle )</param>
            <param name="signalNr">Number (Index) of the signal accordng to SDF.</param>
            <param name="value">Value to be encoded</param>
            <param name="encSignal">points to save location of encoded signal value (inclusive 'unit', if 'encUnit' not used)</param>
            <param name="encUnit">optional: points to save location of signal unit (if this pointer is NULL then 'unit' saved in 'encSignal' buffer also)</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_decodeSignal(System.IntPtr,System.Int32,System.String,System.UInt64@)">
            <summary>
            BLC_decodeSignal takes an encoded Signal value and tries to compute it back to its Signal value.
            Rounding errors might occur for large signals or encoding scales and offsets.
            </summary>
            <param name="handle">the Channel handle the Signal does come from.</param>
            <param name="signalNr">the number of the Signal that has the encodings.</param>
            <param name="encSignal">the encoded signal value as a string.</param>
            <param name="value">the reverted value. rounding errors might occur.</param>
            <returns></returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getSignalsInFrame(System.IntPtr,System.Int32,de.lipowsky.BLC.BabyLin.BLC_signal_t[],System.Int32)">
            <summary>
            Get values of all signals mapped to a frame
            </summary>
            <param name="handle">Handle representing the channel to which the frame belongs (see BLC_getChannelHandle )</param>
            <param name="frameNr">frame number (according to SDF) to get the signal data from</param>
            <param name="signalList">pre-allocated array of BLC_SIGNAL structures to store the signal data to</param>
            <param name="signalListLen">length of the pre-allocated array of BLC_SIGNAL structures</param>
            <returns>
            the number of signals stored to signalList.
            Values &lt;0 on error.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_createHandle(System.IntPtr,System.String,System.IntPtr@)">
            <summary>
            BLC_createHandle retrieves a handle to a loaded Object or creates a new Object.
            These Objects can range from Devices and SDFs down to Signals.
            When retrieving a handle to an existing item the path has to end with a key value pair, where the key is a tag of
            the objects children list.
            When creating a new Object the "new_*=*" key value pair can be followed by key value pairs from the new objects
            property list, to initialize them.
            </summary>
            <param name="handle">the handle to start the query from.</param>
            <param name="path">the query, it is a cstring build from key value pairs, separated by spaces e.g. "protocol=1 service=2".</param>
            <param name="result">value to store the new handle in.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_destroy(System.IntPtr)">
            <summary>
            BLC_destroy removes the handle from the currently opened Objects and removes the Object from its parent.
            The given handle will be removed from the available handles and the Object behind it will be destroyed.
            </summary>
            <param name="handle">the handle of the object to destroy.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_releaseHandle(System.IntPtr)">
            <summary>
            BLC_releaseHandle removes the handle from the currently opened Objects.
            The given handle will be release, but a new handle to the underling object can be retrieved again.
            </summary>
            <param name="handle">the handle to release.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_discover(System.IntPtr,System.String,System.String@)">
            <summary>
            BLC_discover fills the result array with space separated identifiers, that can be used in the path parameters.
            Lists the available tags of the object.
            </summary>
            <param name="handle">the handle to start the query from.</param>
            <param name="path">the query, it is a string build from entries of tags ending with either "property","child", "create" or "execute".</param>
            <param name="result">the result string.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getSignedNumber(System.IntPtr,System.String,System.Int64@)">
            <summary>
            BLC_getSignedNumber gets a signed value from the given handle.
            
            The path will be followed and the last tag has to identify a Number or Boolean property.
            If that property is signed and has less then 64 bits sign extension will be applied, so negative values stay
            negative.
            </summary>
            <param name="handle">the handle to start the query from.</param>
            <param name="path">the query, it is a string build from entries of tags.</param>
            <param name="result">the target value.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getUnsignedNumber(System.IntPtr,System.String,System.UInt64@)">
            <summary>
            BLC_getUnsignedNumber gets an unsigned value from the given handle.
            The path will be followed and the last tag has to identify a Number or Boolean property.
            If that property is signed no sign extension will be applied, so 8 bit -1 will be 255.
            </summary>
            <param name="handle">the handle to start the query from.</param>
            <param name="path">the query, it is a string build from entries of tags.</param>
            <param name="result">the target value.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getBinary(System.IntPtr,System.String,System.Byte[],System.UInt32@)">
            <summary>
            BLC_getBinary gets a binary value from the given handle.
            The path will be followed and the last tag has to identify a property.
            A only Number or only Boolean property will be read as a string representation of it.
            </summary>
            <param name="handle">the handle to start the query from.</param>
            <param name="path">the query, it is a string build from entries of tags.</param>
            <param name="result">the target value.</param>
            <param name="resultLength">this parameter will be set to the length of the result.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_setSignedNumber(System.IntPtr,System.String,System.Int64)">
            <summary>
            BLC_setSignedNumber sets a signed value of the given handle.
            The path will be followed and the last tag has to identify a Number or Boolean property.
            If that property is too small to represent the value the set is rejected.
            </summary>
            <param name="handle">the handle to start the query from.</param>
            <param name="path">the query, it is a string build from entries of tags.</param>
            <param name="value">the value to set.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_setUnsignedNumber(System.IntPtr,System.String,System.UInt64)">
            <summary>
            BLC_setUnsignedNumber sets an unsigned value of the given handle.
            The path will be followed and the last tag has to identify a Number or Boolean property.
            If that property is too small to represent the value the set is rejected.
            </summary>
            <param name="handle">the handle to start the query from.</param>
            <param name="path">the query, it is a string build from entries of tags.</param>
            <param name="value">the value to set.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_setBinary(System.IntPtr,System.String,System.Byte[],System.UInt32)">
            <summary>
            BLC_setBinary sets a binary value of the given handle.
            The path will be followed and the last tag has to identify a property.
            For a only Number or only Boolean property the given value will be parsed as a string, that is then handed to
            BLC_setUnsignedNumber or BLC_setSignedNumber.
            </summary>
            <param name="handle">the handle to start the query from.</param>
            <param name="path">the query, it is a string build from entries of tags.</param>
            <param name="value">the value to set.</param>
            <param name="valueLength">the length of the value to set.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_setCallback(System.IntPtr,System.String,de.lipowsky.BLC.BabyLin.CallBackUserDataUnifiedAccessDelegate,System.IntPtr)">
            <summary>
            BLC_setCallback sets a callback function for an event of the given handle.
            The path will be followed and the last tag has to identify a Callback property.
            Only one callback can be registered per event per object.
            </summary>
            <param name="handle">the handle to start the query from.</param>
            <param name="path">the query, it is a string build from entries of tags.</param>
            <param name="pCallback">the callback to set.</param>
            <param name="userdata">the additional user data to call the callback with.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_execute(System.IntPtr,System.String)">
            <summary>
            BLC_execute executes a method of the given handle.
            The path will be followed and a tag that identifies a Method property, followed by the tags to set
            additional parameters of that method.
            The Method will be executed in a blocking manner.
            </summary>
            <param name="handle">the handle to start the query from.</param>
            <param name="path">the query, it is a cstring build from entries of tags.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_execute_async(System.IntPtr,System.String,de.lipowsky.BLC.BabyLin.CallBackUserDataUnifiedAccessAsyncDelegate,System.IntPtr)">
            <summary>
            BLC_execute_async a method of the given handle.
            The path will be followed and a tag that identifies a Method property, followed by the tags to set
            additional parameters of that method.
            The Method will be executed in a non blocking manner, so the returned value does not state anything about whether
            the operation was successful, or not, but only if it was found or not.
            To get the result value you would get from BLC_execute use the first parameter of the CallBackUserDataUnifiedAccessAsyncDelegate.
            </summary>
            <param name="handle">the handle to start the query from.</param>
            <param name="path">the query, it is a cstring build from entries of tags.</param>
            <param name="pCallback">the callback to call once the operation is complete.</param>
            <param name="userdata">the additional parameter to call the callback with.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="T:de.lipowsky.BLC.BabyLin.BLC_signal_t">
            <summary>
            Carries information about one signal.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_signal_t.index">
            <summary>
            Index number of signal; see the SDF for the adequate number
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_signal_t.isArray">
            <summary>
            Defines wether this signal is a normal, value-based one (0) or LIN2.0 array signal (1).
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_signal_t.value">
            <summary>
            Value of the signal.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_signal_t.arrayLength">
            <summary>
            Length of the array.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_signal_t.arrayData">
            <summary>
            Value(s) of the signal, if isArray == 1.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_signal_t.timestamp">
            <summary>
            Global time index of frame transmission start (in µsec).
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_signal_t.chId">
            <summary>
            Current Channelid
            </summary>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_signal_t.ToString">
            <summary>
            Readable string representation
            </summary>
        </member>
        <member name="T:de.lipowsky.BLC.BabyLin.BLC_targetid_t">
            <summary>
            The structure holds information about a connected BabyLIN device
            retreive informations using BLC_getTargetID or request by using BLC_sendCommand with command "targetid"
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_targetid_t.type">
            <summary>
            Type of the hardware
            
            | Value | Device |
            |------:|--------|
            |0x100  |Baby-LIN|
            |0x101  |Baby-LIN-PLUS|
            |0x102  |Baby-LIN-RC|
            |0x103  |Baby-LIN-KS01|
            |0x200  |Baby-LIN-RM|
            |0x300  |HARP|
            |0x400  |Baby-LIN-RC-PLUS|
            |0x500  |Baby-LIN-RMII|
            |0x502  |HARP-4|
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_targetid_t.version">
            <summary>
            Firmware version of the device
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_targetid_t.build">
            <summary>
            Firmware build number
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_targetid_t.flags">
            <summary>
            Software related flags
            
            |Value|Description|
            |----:|:----------|
            |0x01 |Testversion|
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_targetid_t.serial">
            <summary>
            Device's serial number
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_targetid_t.heapsize">
            <summary>
            Remaining heap size on device (memory available for SDF dowload)
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_targetid_t.numofchannels">
            <summary>
            number of channels
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_targetid_t.name">
            <summary>
            Textual name of the device (zero-terminated C-string)
            </summary>
        </member>
        <member name="T:de.lipowsky.BLC.BabyLin.BLC_error_t">
            <summary>
            Represents a LIN error message
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_error_t.timestamp">
            <summary>
            Time of occurence.
            The timestamp when the error occurred.
            device-timstamp in us if error type is a device error (1-13)
            pc timestamp in ms if error type is dll error (65535)
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_error_t.type">
            <summary>
            Error type
            
            | Value | Name | Description | Status |
            |------:|:-----|:------------|:-------|
            |1|ERRTYPE_ID|Parity error in ID| |
            |2|ERRTYPE_DATA|Read data from BUS does not match send data| Frame-ID |
            |3|ERRTYPE_FRAMING|Framing error in data reception|Frame-ID|
            |4|ERRTYPE_CHECKSUM|Checksum failed|Frame-ID|
            |5|ERRTYPE_DATATO|Data timed out (incomplete msg reception)|Frame-ID|
            |6|ERRTYPE_SEQ|Unexpected state sequencing|internal status|
            |8|ERRTYPE_MACRO|Error in macro execution|internal status|
            |9|ERRTYPE_BUSBUSY|Bus is already used|internal status|
            |10|ERRTYPE_BUSOFF|Bus is offline (no bus power) |internal status|
            |11|ERRTYPE_BUSSPEED_DIFFERS|Actual bus-speed differs from LDF bus speed (Warning) |actual speed|
            |12|ERRTYPE_KWP_ERROR|Error in KWP|KWP error code|
            |13|ERRTYPE_APPLICATION|Application error|unused|
            |14|ERRTYPE_RESP_LOST|Response send buffer overflow occured|unused|
            |15|ERRTYPE_CAN_NOERR|CAN error disappeared|unused|
            |16|ERRTYPE_CAN|CAN error| bitmap 0x01 noAck \n bitmap 0x02 stuffing error \n bitmap 0x04 framing error \n bitmap 0x08 recessive bit error \n bitmap 0x10 dominant bit error \n bitmap 0x20 checksum error|
            |65535|ERRTYPE_DLL_ERROR|Error in DLL occurred|dll status code|
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_error_t.status">
            <summary>
            Additional error information
            
            Depends on type descriptions.
            for "dll status code":
            |status|description|
            |-----:|:----------|
            |1|Lost connection to device|
            </summary>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_error_t.ToString">
            <summary>
            Readable string representation
            </summary>
        </member>
        <member name="T:de.lipowsky.BLC.BabyLin.BLC_jumboframe_t">
            <summary>
            Carries information about one frame, is used as API interface
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_jumboframe_t.chId">
            <summary>
            Id of the channel within the device
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_jumboframe_t.timestamp">
            <summary>
            Global time index of frame transmission start (in us). Received from target, represents the time since the Target was powered on.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_jumboframe_t.intime">
            <summary>
            Timestamp with pc time, used to calculate age of framedata, to allow timeout functions (ms)
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_jumboframe_t.frameId">
            <summary>
            FrameID of Frame ( as appeared on the BUS. On LIN BUS without parity bits )
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_jumboframe_t.lenOfData">
            <summary>
            Length of frameData
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_jumboframe_t.frameData">
            <summary>
            Databytes of the frame
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_jumboframe_t.frameFlags">
            <summary>
            Additional, informational frame flags
            
            Used as a bitfield, multiple flags possible
            | Value | Description |
            |------:|:------------|
            | 0x01  | Frame has error |
            | 0x02  | Frame is selfsent (sent by the BabyLIN-Device, because it simulates the corresponding node) |
            | 0x04  | Timebase, if set, the unit of timestamp is ms, otherwise us |
            | 0x08  | The frame was a SDF specified frame |
            | 0x10  | The frame was an injected frame |
            | 0x20  | The frame was a protocol frame |
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_jumboframe_t.busFlags">
            <summary>
            Bus specific flags
            
            for LIN-BUS:
            Used as a bitfield, multiple flags possible
            | Value | Description |
            |------:|:------------|
            | 0x01  |Valid CLASSIC checksum (V1)|
            | 0x02  |Valid EXTENDED checksum (V2)|
            | 0x04  |incomplete frame without checksum, not an error|
            | 0x08  |Errorframe (f.ex: no data)|
            | 0x10  |Frame is slaveresponse to a master request. If set, the upper 3 bits of flags denote a master request id|
            | 0x20  |Event triggered frame ( only if 0x10 is not set )|
            
            for CAN-BUS:
            Used as a bitfields, multiple flags possible
            | Value | Description |
            |------:|:------------|
            | 0x01  | 29 bit frame identifier |
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_jumboframe_t.checksum">
            <summary>
            checksum of the frame
            stores a checksum V1 or V2 ( refer to busFlags which checksum type applies )
            </summary>
        </member>
        <member name="T:de.lipowsky.BLC.BabyLin.BLC_frame_t">
            <summary>
            Carries information about one frame, is used as API interface
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_frame_t.chId">
            <summary>
            Id of the channel within the device
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_frame_t.timestamp">
            <summary>
            Global time index of frame transmission start (in us). Received from target, represents the time since the Target was powered on.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_frame_t.intime">
            <summary>
            Timestamp with pc time, used to calculate age of framedata, to allow timeout functions (ms)
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_frame_t.frameId">
            <summary>
            FrameID of Frame ( as appeared on the BUS. On LIN BUS without parity bits )
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_frame_t.lenOfData">
            <summary>
            Length of frameData
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_frame_t.frameData">
            <summary>
            Databytes of the frame
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_frame_t.frameFlags">
            <summary>
            Additional, informational frame flags
            
            Used as a bitfield, multiple flags possible
            | Value | Description |
            |------:|:------------|
            |0x01   |Frame has error|
            |0x02   |Frame is selfsent (sent by the BabyLIN-Device, because it simulates the corresponding node)|
            |0x04   |Timebase, if set, the unit of timestamp is ms, otherwise us|
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_frame_t.busFlags">
            <summary>
            Bus specific flags
            
            for LIN-BUS:
            Used as a bitfield, multiple flags possible
            | Value | Description |
            |------:|:------------|
            | 0x01  |Valid CLASSIC checksum (V1)|
            | 0x02  |Valid EXTENDED checksum (V2)|
            | 0x04  |incomplete frame without checksum, not an error|
            | 0x08  |Errorframe (f.ex: no data)|
            | 0x10  |Frame is slaveresponse to a master request. If set, the upper 3 bits of flags denote a master request id|
            | 0x20  |Event triggered frame ( only if 0x10 is not set )|
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_frame_t.checksum">
            <summary>
            checksum of the frame
            stores a checksum V1 or V2 ( refer to busFlags which checksum type applies )
            </summary>
        </member>
        <member name="T:de.lipowsky.BLC.BabyLin.BLC_dtl_t">
            <summary>
            Carries information about DTL protocol (both requests and responses).
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_dtl_t.status">
            <summary>
            Status of protocol frame
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_dtl_t.nad">
            <summary>
            NAD of protocol frame
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_dtl_t.length">
            <summary>
            Length of the data-array.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_dtl_t.data">
            <summary>
            frame data, beginning with the (R)SID.
            </summary>
        </member>
        <member name="T:de.lipowsky.BLC.BabyLin.BLC_event_t">
            <summary>
            Carries information about an event, is used as API interface
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_event_t.timestamp">
            <summary>
            The timestamp (of the device (us)) when the error occurred.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_event_t.pc_timestamp">
            <summary>
            The timestamp (of the PC (ms)) when the error occurred.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_event_t.event_nr">
            <summary>
            the event that occured
            | Value | Name | Description | data |
            |------:|:-----|:------------|:-------|
            |0|EVENTID_REBOOT|Device has rebooted| |
            |1|EVENTID_HWSTATE|BUS hardware state changed|0=bus voltage off, 1=bus voltage on|
            |2|EVENTID_SCHEDULECHANGE|schedule state changed|1=off, otherwise=index of schedule|
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_event_t.data">
            <summary>
            additional information of an event
            </summary>
        </member>
        <member name="T:de.lipowsky.BLC.BabyLin.BLC_macrostate_t">
            <summary>
            Information about a macro, used as parameter of a callback function registered by BLC_registerMacroStateCallback
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_macrostate_t.channelid">
            <summary>
            channel number this information belongs to
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_macrostate_t.macronr">
            <summary>
            macro-number the information is about
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_macrostate_t.cmdnr">
            <summary>
            the macro command number currently executed
            denotes the command-number in the macro macronr which is currently executed
            valid if state denotes a running macro
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_macrostate_t.state">
            <summary>
            state of the macro execution
            
            |Value|Description|
            |----:|:----------|
            |0x00 |Macro execution ended|
            |0x01 |Macro execution started|
            |0x02 |Macro execution running|
            |0x03 |Macro execution error|
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_macrostate_t.timestamp">
            <summary>
            timestamp of the macro state
            </summary>
        </member>
        <member name="T:de.lipowsky.BLC.BabyLin.BLC_portInfo_t">
            <summary>
            The structure holds information about a BabyLIN device connected to the PC
            Use BLC_getBabyLinPorts to retrieve a list of connected BabyLIN-Devices
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_portInfo_t.portNr">
            <summary>
            The COM-port number the device is connected to (windows only), use this value for BLC_open.
            For Network devices this is the TCP port to connect to.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_portInfo_t.type">
            <summary>
            The type of interface of the connected device (0=USBSerial, 1=Not Connectable(Network UDP), 2=Network TCP)
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_portInfo_t.name">
            <summary>
            The name of the connected device (f.ex. BabyLIN RM-II).
            For Network devices this is the hostname of the device.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_portInfo_t.device">
            <summary>
            The linux device file the BabyLIN is connected to (linux only).
            For Network devices this is the ip in dot notation.
            </summary>
        </member>
        <member name="T:de.lipowsky.BLC.BabyLin.BLC_channelInfo_t">
            <summary>
            Return data of the command 'BLC_getChannelInfo' providing information about a channel (BUS-type, speed etc.)
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_channelInfo_t.id">
            <summary>
            Channel-id(i.e. 0 = device channel)
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_channelInfo_t.type">
            <summary>
            Channel-Type(i.e. 0 = LIN, 1 = CAN, 99 = DEVICE)
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_channelInfo_t.name">
            <summary>
            Textual name of the Channel (zero-terminated C-string)
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_channelInfo_t.maxBaudrate">
            <summary>
            Maximum Baudrate of Channel
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_channelInfo_t.reserved1">
            <summary>
            Flags:
            0x01: Deactivated: Channel is not available due to missing license
            0x02: SDFV3Support: Channel is licensed to run SDF V3 (makes sense only for LIN channels)
            0x04: LEDRedRaw: Channel Led need update as user overwrite mode was finished
            0x08: Operational: Channel holds valid SDF or monitor configuration, so channel operation are allowed
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_channelInfo_t.reserved2">
            <summary>
            Reserved value (ignore for now)
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_channelInfo_t.reserved3">
            <summary>
            Reserved value (ignore for now)
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_channelInfo_t.associatedWithSectionNr">
            <summary>
            the number of the section of the loaded sdf associated with this channel
            >= 0 means valid section number, -1: no mapping or no sdf loaded
            </summary>
        </member>
        <member name="T:de.lipowsky.BLC.BabyLin.BLC_sdfInfo_t">
            <summary>
            Return data of the command BLC_getSDFInfo
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_sdfInfo_t.name">
            <summary>
            Filename of the loaded sdf
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_sdfInfo_t.sectionCount">
            <summary>
            number of sections in the SDF. A file consists of at least one Section (LIN, CAN or DEVICE)
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_sdfInfo_t.version_major">
            <summary>
            The major SDF version
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_sdfInfo_t.version_minor">
            <summary>
            The minor SDF version
            </summary>
        </member>
        <member name="T:de.lipowsky.BLC.BabyLin.BLC_sectionInfo_t">
            <summary>
            Return data of the command BLC_getSectionInfo
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_sectionInfo_t.name">
            <summary>
            Textual name of the Section (zero-terminated C-string) as defined using SessionConf
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_sectionInfo_t.type">
            <summary>
            Channel-Type(i.e. 0 = LIN, 1 = CAN, 99 = DEVICE)
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_sectionInfo_t.nr">
            <summary>
            Number of the section within the SDF ( zero-based index )
            </summary>
        </member>
        <member name="T:de.lipowsky.BLC.BabyLin.SDF_sectionInfo_t">
            <summary>
            Represents a connection to a BabyLIN-device (for old BabyLINs) or one of the channels on new BabyLIN-devices
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.SDF_sectionInfo_t.sectionNr">
            <summary>
            
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.SDF_sectionInfo_t.type">
            <summary>
            Sectiontype (i.e. 0 = LIN, 1 = CAN, 99 = DEVICE)
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.SDF_sectionInfo_t.name">
            <summary>
            
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.SDF_sectionInfo_t.description">
            <summary>
            
            </summary>
        </member>
        <member name="T:de.lipowsky.BLC.BabyLin.CallBackFrameDelegate">
            <summary>
            callback function header whenever a frame report is received from a BabyLIN device
            </summary>
            <param name="handle">The channel where the event occured</param>
            <param name="frame">A frame</param>
        </member>
        <member name="T:de.lipowsky.BLC.BabyLin.CallBackUserDataFrameDelegate">
            <summary>
            callback function header whenever a frame report is received from a BabyLIN device
            </summary>
            <param name="handle">The channel where the event occured</param>
            <param name="frame">A frame</param>
            <param name="userdata">Custom user data</param>
        </member>
        <member name="T:de.lipowsky.BLC.BabyLin.CallBackJumboFrameDelegate">
            <summary>
            callback function header whenever a frame report is received from a BabyLIN device
            </summary>
            <param name="handle">The channel where the event occured</param>
            <param name="frame">A frame</param>
        </member>
        <member name="T:de.lipowsky.BLC.BabyLin.CallBackUserDataJumboFrameDelegate">
            <summary>
            callback function header whenever a frame report is received from a BabyLIN device
            </summary>
            <param name="handle">The channel where the event occured</param>
            <param name="frame">A frame</param>
            <param name="userdata">Custom user data</param>
        </member>
        <member name="T:de.lipowsky.BLC.BabyLin.CallBackSignalDelegate">
            <summary>
            callback function header whenever a signal report is received from a babylin device
            </summary>
            <param name="handle">The channel where the event occured</param>
            <param name="signal">a signal</param>
        </member>
        <member name="T:de.lipowsky.BLC.BabyLin.CallBackUserDataSignalDelegate">
            <summary>
            callback function header whenever a signal report is received from a babylin device
            </summary>
            <param name="handle">The channel where the event occured</param>
            <param name="signal">a signal</param>
            <param name="userdata">Custom user data</param>
        </member>
        <member name="T:de.lipowsky.BLC.BabyLin.CallBackMacroStateDelegate">
            <summary>
            callback function header whenever a macrostate is recived from a BabyLIN device
            </summary>
            <param name="handle">The channel where the event occured</param>
            <param name="macrostate">a macrostate</param>
        </member>
        <member name="T:de.lipowsky.BLC.BabyLin.CallBackUserDataMacroStateDelegate">
            <summary>
            callback function header whenever a macrostate is recived from a BabyLIN device
            </summary>
            <param name="handle">The channel where the event occured</param>
            <param name="macrostate">a macrostate</param>
            <param name="userdata">Custom user data</param>
        </member>
        <member name="T:de.lipowsky.BLC.BabyLin.CallBackErrorDelegate">
            <summary>
            callback function header whenever a buserror report is received from a BabyLIN device
            </summary>
            <param name="handle">The channel where the event occured</param>
            <param name="error">An error</param>
        </member>
        <member name="T:de.lipowsky.BLC.BabyLin.CallBackUserDataErrorDelegate">
            <summary>
            callback function header whenever a buserror report is received from a BabyLIN device
            Use BabyLin.ConvertObjectToIntPtr() and BabyLin.ConvertIntPtrToObject() to en- and decode objects into IntPtr.
            </summary>
            <param name="handle">The channel where the event occured</param>
            <param name="error">An error</param>
            <param name="userdata">Custom user data</param>
        </member>
        <member name="T:de.lipowsky.BLC.BabyLin.CallBackDebugDelegate">
            <summary>
            callback function header whenever a debug message is received from a BabyLIN device
            Use BabyLin.ConvertObjectToIntPtr() and BabyLin.ConvertIntPtrToObject() to en- and decode objects into IntPtr.
            </summary>
            <param name="handle">The channel where the event occured</param>
            <param name="data">A debug string</param>
        </member>
        <member name="T:de.lipowsky.BLC.BabyLin.CallBackUserDataDebugDelegate">
            <summary>
            callback function header whenever a debug message is received from a BabyLIN device
            Use BabyLin.ConvertObjectToIntPtr() and BabyLin.ConvertIntPtrToObject() to en- and decode objects into IntPtr.
            </summary>
            <param name="handle">The channel where the event occured</param>
            <param name="data">A debug string</param>
            <param name="userdata">Custom user data</param>
        </member>
        <member name="T:de.lipowsky.BLC.BabyLin.CallBackDTLDelegate">
            <summary>
            callback function header whenever a dtl request is received from a BabyLIN device
            Use BabyLin.ConvertObjectToIntPtr() and BabyLin.ConvertIntPtrToObject() to en- and decode objects into IntPtr.
            </summary>
            <param name="handle">The channel where the event occured</param>
            <param name="dtl">A DTL request or response</param>
        </member>
        <member name="T:de.lipowsky.BLC.BabyLin.CallBackUserDataDTLDelegate">
            <summary>
            callback function header whenever a dtl request is received from a BabyLIN device
            Use BabyLin.ConvertObjectToIntPtr() and BabyLin.ConvertIntPtrToObject() to en- and decode objects into IntPtr.
            </summary>
            <param name="handle">The channel where the event occured</param>
            <param name="dtl">A DTL request or response</param>
            <param name="userdata">Custom user data</param>
        </member>
        <member name="T:de.lipowsky.BLC.BabyLin.CallBackUserDataEventDelegate">
            <summary>
            Not documented yet
            Use BabyLin.ConvertObjectToIntPtr() and BabyLin.ConvertIntPtrToObject() to en- and decode objects into IntPtr.
            </summary>
            <param name="handle"></param>
            <param name="eventData"></param>
            <param name="userdata"></param>
        </member>
        <member name="T:de.lipowsky.BLC.BabyLin.BLC_DTL_STATUS">
            <summary>
            Status of DTL protocol frame
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_DTL_STATUS.LD_COMPLETED">
            <summary>
            Completed
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_DTL_STATUS.LD_FAILED">
            <summary>
            Failed
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_DTL_STATUS.LD_IN_PROGRESS">
            <summary>
            In progress
            </summary>
        </member>
        <member name="T:de.lipowsky.BLC.BabyLin.BLC_ANSWER_TYPE">
            <summary>
            Type of answer returned by BLC_getAnswerTypeByName() and BLC_getAnswerTypeByIndex()
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_ANSWER_TYPE.BLC_ANSWER_TYPE_INT">
            <summary>
            32bit integer
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_ANSWER_TYPE.BLC_ANSWER_TYPE_STR">
            <summary>
            zero-terminated string (variable length)
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_ANSWER_TYPE.BLC_ANSWER_TYPE_BIN">
            <summary>
            binary data (variable length)
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_ANSWER_TYPE.BLC_ANSWER_TYPE_INT64">
            <summary>
            a 64 bit integer value
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_ANSWER_TYPE.BLC_ANSWER_TYPE_FLOAT">
            <summary>
            a floating point value
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_ANSWER_TYPE.BLC_ANSWER_TYPE_UNKNOWN">
            <summary>
            an unknown value
            </summary>
        </member>
        <member name="T:de.lipowsky.BLC.BabyLin.CallBackUserDataUnifiedAccessDelegate">
            <summary>
            The function prototype used for registering callbacks.
            </summary>
            <param name="handle">the handle to the Object, that triggered the callback.</param>
            <param name="userdata">the userdata specified when registering the callback.</param>
        </member>
        <member name="T:de.lipowsky.BLC.BabyLin.CallBackUserDataUnifiedAccessAsyncDelegate">
            <summary>
            The function prototype used for executing asynchronous tasks.
            </summary>
            <param name="result">the value returned by the actual execute call.</param>
            <param name="handle">the handle to the Object, that triggered the callback.</param>
            <param name="userdata">the userdata specified when registering the callback.</param>
        </member>
        <member name="T:de.lipowsky.LIN.Devices.Common.PlatformType">
            <summary>
            The platform type of the .NET wrapper.
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.Common.PlatformType.AnyCPU">
            <summary>
            AnyCPU
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.Common.PlatformType.x86">
            <summary>
            x86
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.Common.PlatformType.x64">
            <summary>
            x64
            </summary>
        </member>
        <member name="T:de.lipowsky.LIN.Devices.Common.Platform">
            <summary>
            This class features methods to receive platform inforamtions.
            </summary>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.Common.Platform.GetArchitecture">
            <summary>
            Returns the platform type
            </summary>
            <returns>the platform type</returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.Common.Platform.GetText(de.lipowsky.LIN.Devices.Common.PlatformType)">
            <summary>
            Returns a text representation of the platform type
            </summary>
            <param name="platformType"></param>
            <returns>a text representation of the platform type</returns>
        </member>
        <member name="T:de.lipowsky.BabyLIN.BabyLinException">
            <summary>
            This is an exception that occurrs when a function returns an error.
            Exceptions will only be thrown, if you activate them by setting EnableExceptions to true.
            </summary>
        </member>
        <member name="M:de.lipowsky.BabyLIN.BabyLinException.ToString">
            <summary>
            Returns the details of the exception.
            </summary>
            <returns>A string that contains the details of the exception</returns>
        </member>
        <member name="P:de.lipowsky.BabyLIN.BabyLinException.EnableExceptions">
            <summary>
            Exceptions will only be thrown if this boolean is set to true
            </summary>
        </member>
        <member name="P:de.lipowsky.BabyLIN.BabyLinException.ReturnCode">
            <summary>
            The return code returned by the DLL function.
            </summary>
        </member>
        <member name="P:de.lipowsky.BabyLIN.BabyLinException.InterfaceType">
            <summary>
            The interface type used.
            </summary>
        </member>
        <member name="P:de.lipowsky.BabyLIN.BabyLinException.MethodName">
            <summary>
            The name of the method, that has thrown the exception.
            </summary>
        </member>
        <member name="P:de.lipowsky.BabyLIN.BabyLinException.IsSpecialErrorCode">
            <summary>
            This flag tells you, whether the return code has special error codes or if it supports the default error codes.
            </summary>
        </member>
        <member name="T:de.lipowsky.LIN.Devices.Common.InterfaceType">
            <summary>
            The used BabyLIN interface.
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.Common.InterfaceType.BL">
            <summary>
            The old BL interface. Namespace: de.lipowsky.LIN.Devices
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.Common.InterfaceType.BLC">
            <summary>
            The new BLC interface. Namespace: de.lipowsky.BLC
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.Common.InterfaceType.SDF">
            <summary>
            The new interface to access SDF data. Namespace: de.lipowsky.SDF
            </summary>
        </member>
    </members>
</doc>
